{=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=
RRL - Reflection Resource Library
Wrappers for SRL-Reflection/simbareflection.
=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=}

{
This work is licensed under the Creative Commons Attribution-NonCommercial-ShareAlike 3.0 Unported License.
To view a copy of this license, visit http://creativecommons.org/licenses/by-nc-sa/3.0/
or send a letter to Creative Commons, 171 Second Street, Suite 300, San Francisco, California, 94105, USA.

Copyright (C) 2010 - 2011 by Joe Haddad, all rights reserved.
This file is part of the RRL project (https://github.com/Timer/RRL).

For extended permissions please contact me by E-Mail, Timer150@Gmail.com.
}

function R_FindRandoms: Boolean;
begin
  Result := r_HandleRandoms;
end;

function GetMyPos: TPoint;
var
  p: TRSTile;
begin
  p := r_GetLocation;
  Result := Point(p.x, p.y);
end;

function TileOnMM(const Tile: TPoint): Boolean;
begin
  Result := r_TileOnMinimap(RSTile(Tile.x, Tile.y));
end;

function TileToMM(const Tile: TPoint): TPoint;
begin
  Result := r_TileToMinimap(RSTile(Tile.x, Tile.y));
end;

function R_GetSkillLevelM(const V: Variant): Integer;
begin
  case (VarType(V)) of
    varString: Result := r_GetSkillLevel(r_GetSkillIndex(V));
  else
    Result := r_GetSkillLevel(V);
  end;
end;

function R_GetSkillExperienceM(const V: Variant): Integer;
begin
  case (VarType(V)) of
    varString: Result := r_GetSkillExperience(r_GetSkillIndex(V));
  else
    Result := r_GetSkillExperience(V);
  end;
end;
