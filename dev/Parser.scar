program Hooks_Parser;

const
  ClientVersion = 640;//Have the 640.txt hook output file in the same directory
                      //As this script.

var
  RawHookNames, IncludeNames: TStringArray;
  Indexes, Types: TIntegerArray;

procedure Setup;
begin
  WriteLn('Setting up.');
  RawHookNames := ['LoginIndex', 'getChatLines', 'getMyRSPlayer', 'getBaseX',
                   'getBaseY', 'getNPCCount', 'getNPCNodes', 'getNPCIndexArray',
                   'getRSNPCNC', 'getPlayerCount', 'getPlayerIndexArray',
                   'getRSPlayerArray', 'getInterfaces', 'getValidInterfaces',
                   'getMenuX', 'getMenuY', 'getMenuWidth', 'getMenuHeight',
                   'getMenuX2', 'getMenuY2', 'getMenuWidth2', 'getMenuHeight2',
                   'MapAngle', 'getDestX', 'getDestY',
                   'getCamPosX', 'getCamPosY', 'getCamPosZ', 'getCamCurveX', 'getCamCurveY',
                   'getLoadedPlane', 'getPlaneArray', 'getGroundTiles',
                   'getGroundByteArray', 'getToolkit',
                   'getSkillLevels', 'getSkillExperiences', 'getSettingsArray',
                   'getLoopCycle', 'getRSItemHashTable', 'getItemDefLoader', 'getObjectDefLoader',
                   'getCrossHairColor', 'getFriendsList', 'getFriendsWorlds',
                   'hook.chatline.getName', 'hook.chatline.getMessage',
                   'hook.rsanimable.getX1', 'hook.rsanimable.getY1', 'hook.rsanimable.getX2', 'hook.rsanimable.getY2',
                   'hook.rscharacter.getAnimation', 'hook.rscharacter.LocationX', 'hook.rscharacter.LocationY',
                   'hook.rscharacter.getHeight', 'hook.rscharacter.getOrientation',
                   'hook.rscharacter.LoopCycleStatus', 'hook.rscharacter.getHPRatio',
                   'hook.rscharacter.getInteracting',
                   'hook.rsplayer.getTeam', 'hook.rsplayer.getLevel', 'hook.rsplayer.getName',
                   'hook.rsplayer.PlayerDef', 'hook.rsplayer.getSkillLevels',
                   'hook.playerdef.getEquipment', 'hook.playerdef.getModelID',
                   'hook.rsinteractable.getX', 'hook.rsinteractable.getY', 'hook.rsinteractable.getPlane',
                   'hook.animablenode.getAnimable', 'hook.animablenode.getNext'];
  IncludeNames := ['LoginIndex', 'Messages', 'LocalPlayer', 'BaseX',
                   'BaseY', 'NPCCount', 'NPCNodes', 'NPCIndexes',
                   'NPCNC', 'PlayerCount', 'PlayerIndexes',
                   'Players', 'Interfaces', 'ValidInterfaces',
                   'MenuX', 'MenuY', 'MenuW', 'MenuH',
                   'SubMenuX', 'SubMenuY', 'SubMenuW', 'SubMenuH',
                   'MapAngle', 'DestX', 'DestY',
                   'CamX', 'CamY', 'CamZ', 'CamCurveX', 'CamCurveY',
                   'CurrentPlane', 'Planes', 'GroundTiles',
                   'GroundBytes', 'ToolKit',
                   'Levels', 'Experience', 'Settings',
                   'LoopCycle', 'GroundCache', 'ItemDefinition', 'ObjectDefinition',
                   'CrossHairColor', 'FriendsList', 'FriendsWorlds',
                   'Message_Name', 'Message_Message',
                   'Animable_AreaX1', 'Animable_AreaY1', 'Animable_AreaX2', 'Animable_AreaY2',
                   'Character_Animation', 'Character_X', 'Character_Y',
                   'Character_Height', 'Character_Orientation',
                   'Character_LoopCycleStatus', 'Character_HPRatio',
                   'Character_Interacting',
                   'Player_Team', 'Player_Level', 'Player_Name',
                   'Player_Definition', 'Player_SkillLevels',
                   'PlayerDefinition_Equipment', 'PlayerDefinition_ModelID',
                   'Animable_X', 'Animable_Y', 'Animable_Plane',
                   'AnimableNode_Animable', 'AnimableNode_Next'];
  Indexes      := [0, 1, 2, 3,
                   4, 5, 6, 7,
                   8, 9, 10,
                   11, 12, 13,
                   14, 15, 16, 17,
                   18, 19, 20, 21,
                   22, 23, 24,
                   25, 26, 27, 28, 29,
                   30, 31, 32,
                   33, 34,
                   35, 36, 37,
                   38, 39, 40, 41,
                   42, 43, 44,
                   45, 46,
                   47, 48, 49, 50,
                   51, 52, 53,
                   54, 55,
                   56, 57,
                   58,
                   59, 60, 61,
                   62, 63,
                   64, 65,
                   66, 67, 68,
                   69, 70];
  Types        := [0, 0, 0, 0,
                   0, 0, 0, 0,
                   0, 0, 0,
                   0, 0, 0,
                   0, 0, 0, 0,
                   0, 0, 0, 0,
                   0, 0, 0,
                   0, 0, 0, 0, 0,
                   0, 0, 0,
                   0, 0,
                   0, 0, 0,
                   0, 0, 0, 0,
                   0, 0, 0,
                   1, 1,
                   1, 1, 1, 1,
                   1, 1, 1,
                   1, 1,
                   1, 1,
                   1,
                   1, 1, 1,
                   1, 1,
                   1, 1,
                   1, 1, 1,
                   1, 1];
  WriteLn('We want to find ' + IntToStr(GetArrayLength(RawHookNames)) + ' hooks from the file!');
end;

function FetchHooksFile: AnsiString;
var
  FileHandle: LongInt;
  Path: string;
begin
  Path := ScriptPath + IntToStr(ClientVersion) + '.txt';
  if (FileExists(Path)) then
  begin
    FileHandle := OpenFile(Path, False);
    ReadFileString(FileHandle, Result, FileSize(FileHandle));
    CloseFile(FileHandle);
    WriteLn('Read the hooks file!');
  end else
  begin
    WriteLn('The hooks file (' + Path + ') doesn''t exist!');
    Exit;
  end;
end;

type
  THook = record
    Hook, Info: string;
    Index: Integer;
  end;

  THookArray = array of THook;

function FoundAlready(const arr: THookArray; const Ind: Integer): Boolean;
var
  i: Integer;
begin
  Result := True;
  if (Length(arr) > 0) then
    for i := 0 to High(arr) do
      if (arr[i].Index = Ind) then
        Exit;
  Result := False;
end;

function GetHooksArray: THookArray;
var
  HooksFile: AnsiString;
  TheExplosion, tmpa: TStringArray;
  l, ll, i, ii, C: Integer;
  HookLine, tmp, tmps: string;
begin
  HooksFile := FetchHooksFile;
  if (HooksFile <> '') then
  begin
    TheExplosion := Explode(#10, HooksFile);
    l := GetArrayLength(TheExplosion);
    ll := GetArrayLength(RawHookNames);
    WriteLn('Loaded ' + IntToStr(l) + ' lines!');
    SetLength(Result, l);
    for i := 0 to l - 1 do
      Result[i].Index := -1;
    for i := 0 to l - 1 do
    begin
      AddToReport('Reading line ' + IntToStr(i + 1) + '!');
      HookLine := TheExplosion[i];
      Delete(HookLine, Length(HookLine), 1);
      for ii := 0 to ll - 1 do
        if (Pos(RawHookNames[ii] + ' = ', HookLine) > 0) and (not FoundAlready(Result, Indexes[ii])) then
        begin
          AddToReport('Found ' + RawHookNames[ii] + ' on line ' + IntToStr(i + 1) + '!');
          Result[C].Index := Indexes[ii];
          tmp := Between('''', '''', HookLine);
          tmpa := Explode('.', tmp);
          tmps := tmpa[1];
          if (Types[ii] <> 0) then
            Result[C].Hook := tmps
          else
            Result[C].Hook := tmp;
          Result[C].Info := HookLine + ' [' + IncludeNames[ii] + ']';
          Inc(C);
          Break;
        end;
    end;
    SetLength(Result, C);
  end;
end;

function GetHeader(const Hooks: Boolean): string;
begin
  if (Hooks) then
    Result := '/**' + #10
  else
    Result := '{' + #10;
  Result := Result +
'RRL - Reflection Resource Library' + #10 +
'' + #10 +
'This work is licensed under the Creative Commons Attribution-NonCommercial-NoDerivs 3.0 Unported License.' + #10 +
'To view a copy of this license, visit http://creativecommons.org/licenses/by-nc-nd/3.0/' + #10 +
'or send a letter to Creative Commons, 171 Second Street, Suite 300, San Francisco, California, 94105, USA.' + #10 +
'' + #10 +
'Copyright (C) 2010 - 2011 by Joe Haddad, all rights reserved.' + #10 +
'This file is part of the RRL project (https://github.com/Timer/RRL).' + #10 +
'' + #10 +
'For extended permissions please contact me by E-Mail, Timer150@Gmail.com.' + #10;
  if (Hooks) then
    Result := Result + '**/' + #10
  else
    Result := Result + '}' + #10;
end;

function GenerateInformationFile(const arr: THookArray): AnsiString;
var
  i: Integer;
begin
  Result := GetHeader(False);
  Result := Result + #10 + 'const' + #10;
  for i := 0 to High(arr) do
    Result := Result + '  hook_' + IncludeNames[arr[i].Index] + ' = ' + IntToStr(arr[i].Index) + ';' + #10;
end;

function GenerateHooksFile(const arr: THookArray): AnsiString;
var
  i: Integer;
begin
  Result := GetHeader(True);
  for i := 0 to High(arr) do
    Result := Result + IntToStr(arr[i].Index) + ':' + arr[i].Hook + '/*** ' + arr[i].Info + ' ***/' + #10;
end;

procedure PrintMissing(const missing: THookArray);
var
  Found: TIntegerArray;
  i: Integer;
begin
  SetLength(Found, Length(missing));
  for i := 0 to High(missing) do
    Found[i] := missing[i].Index;
  for i:= 0 to High(Indexes) do
    if (not InIntArray(Found, indexes[i])) then
      WriteLn(i);
end;

{function GenerateRefrenceFile: AnsiString;
var
  i: Integer;
begin
  for i := 0 to High(RawHookNames) do
    Result := Result + RawHookNames[i] + ' = ' + IncludeNames[i] + #10;
end;}

procedure SaveFile(const Path: string; const Contents: AnsiString);
var
  FileHandle: LongInt;
begin
  WriteLn('Writing to ' + Path + '!');
  FileHandle := RewriteFile(Path, False);
  WriteFileString(FileHandle, Contents);
  CloseFile(FileHandle);
  WriteLn('Closed file.');
end;

procedure Run;
var
  FoundHooks: THookArray;
  l, i: Integer;
  InfoFile, HooksFile{, RefFile}: AnsiString;
begin
  FoundHooks := GetHooksArray;
  l := GetArrayLength(FoundHooks);
  WriteLn('We found ' + IntToStr(l) + '/' + IntToStr(GetArrayLength(RawHookNames)) + ' of our hooks!');
  PrintMissing(FoundHooks);
  if (l > 0) then
  begin
    WriteLn('Creating hook information file[s].');
    InfoFile := GenerateInformationFile(FoundHooks);
    HooksFile := GenerateHooksFile(FoundHooks);
    {RefFile := GenerateRefrenceFile;}
    WriteLn('Saving hook file[s].');
    SaveFile(ScriptPath + 'Hooks.info', InfoFile);
    SaveFile(ScriptPath + 'Hooks.txt', HooksFile);
    {SaveFile(ScriptPath + 'Hook Lookup.txt', RefFile);}
  end else
    WriteLn('No hooks were found.');
end;

begin
  Setup;
  Run;
end.