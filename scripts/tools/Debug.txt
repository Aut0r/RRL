{
This work is licensed under the Creative Commons Attribution-NonCommercial-NoDerivs 3.0 Unported License.
To view a copy of this license, visit http://creativecommons.org/licenses/by-nc-nd/3.0/
or send a letter to Creative Commons, 171 Second Street, Suite 300, San Francisco, California, 94105, USA.

Copyright (C) 2010 - 2011 by Joe Haddad, all rights reserved.
This file is part of the RRL project (https://github.com/Timer/RRL).

For extended permissions please contact me by E-Mail, Timer150@Gmail.com.
}

var
  POMS_SCRIPT: string;
  POMS_VARIABLES: TStringArray;

{$DEFINE POMS_DEBUG}

procedure POMS_DebugLine(_text: string);
begin
  {$IFNDEF LIMIT_TEXT}
    WriteLn('[' + TimeRunning + '] : ' + _text);
  {$ENDIF}
end;

procedure ClearSMARTCanvas;
var
  SCanvas, Canvas: TCanvas;
  BMP, BMP2, I, Usless, II, III: Integer;
  TPA: TPointArray;
begin
  try
    POMS_DEBUGLINE('Clearing SMART Canvas....');
    BMP := BitmapFromString(765, 503, '');
    SCanvas := GetBitmapCanvas(BMP);
    SCanvas.handle := SmartGetDebugDC;
    BMP2 := BitmapFromString(765, 503, '');
    TPA := LoadTextTPA('POMS rev 1', StatChars, Usless);
    for I := 0 to High(TPA) do
      FastSetPixel(BMP2, TPA[I].x + 25, TPA[I].y + 35, clWhite);
    TPA := LoadTextTPA(POMS_SCRIPT, StatChars, Usless);
    for I := 0 to High(TPA) do
      FastSetPixel(BMP2, TPA[I].x + 25, TPA[I].y + 45, clWhite);
    for II := 0 to High(POMS_VARIABLES) do
    begin
      TPA := LoadTextTPA(POMS_VARIABLES[II], StatChars, Usless);
      for III := 0 to High(TPA) do
        FastSetPixel(BMP2, TPA[III].x + 25, TPA[III].y + 35 + ((II + 3) * 10), clWhite);
    end;
    Canvas := GetBitmapCanvas(BMP2);
    CopyCanvas(Canvas, SCanvas, 0, 0, 765, 503, 0, 0, 765, 503);
    FreeBitmap(BMP);
    FreeBitmap(BMP2);
    POMS_DEBUGLINE('Cleared SMART Canvas!!');
  except end;
end;

procedure DebugTPA(TPA: TPointArray);
var
  SCanvas, Canvas: TCanvas;
  BMP, BMP2, I, Usless, II, III: Integer;
  TPAA: TPointArray;
begin
  try
    POMS_DEBUGLINE('Found ' + IntToStr(Length(TPA)) + ' colours!');
    POMS_DEBUGLINE('Debugging TPA!');
    BMP := BitmapFromString(765, 503, '');
    SCanvas := GetBitmapCanvas(BMP);
    SCanvas.handle := SmartGetDebugDC;
    BMP2 := BitmapFromString(765, 503, '');
    for I := 0 to High(TPA) do
      FastSetPixel(BMP2, TPA[I].x, TPA[I].y, clRed);
    TPAA := LoadTextTPA('POMS rev 1', StatChars, Usless);
    for I := 0 to High(TPAA) do
      FastSetPixel(BMP2, TPAA[I].x + 25, TPAA[I].y + 35, clWhite);
    TPAA := LoadTextTPA(POMS_SCRIPT, StatChars, Usless);
    for I := 0 to High(TPAA) do
      FastSetPixel(BMP2, TPAA[I].x + 25, TPAA[I].y + 45, clWhite);
    for II := 0 to High(POMS_VARIABLES) do
    begin
      TPAA := LoadTextTPA(POMS_VARIABLES[II], StatChars, Usless);
      for III := 0 to High(TPAA) do
        FastSetPixel(BMP2, TPAA[III].x + 25, TPAA[III].y + 35 + ((II + 3) * 10), clWhite);
    end;
    Canvas := GetBitmapCanvas(BMP2);
    CopyCanvas(Canvas, SCanvas, 0, 0, 765, 503, 0, 0, 765, 503);
    FreeBitmap(BMP);
    FreeBitmap(BMP2);
    POMS_DEBUGLINE('Debuged TPA Successfully!');
  except
  end;
end;