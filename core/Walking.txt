{=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=
RRL - Reflection Resource Library
Walking procedures

---------------------------------------------------------

 * function NULL_RSTILE: TRSTile;
     By: Timer
  * function GetFlagPosition: TRSTile;
     By: Timer
 * function ClickTile(const Tile: TRSTile): Boolean;
     By: Timer
=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=}

{
This work is licensed under the Creative Commons Attribution-NonCommercial-NoDerivs 3.0 Unported License.
To view a copy of this license, visit http://creativecommons.org/licenses/by-nc-nd/3.0/
or send a letter to Creative Commons, 171 Second Street, Suite 300, San Francisco, California, 94105, USA.

Copyright (C) 2010 - 2011 by Joe Haddad, all rights reserved.
This file is part of the RRL project (https://github.com/Timer/RRL).

For extended permissions please contact me by E-Mail, Timer150@Gmail.com.
}

function NULL_RSTILE: TRSTile;
var
  T: TRSTile;
begin
  with T do
  begin
    x := -1;
    y := -1;
  end;
  Result := T;
end;

function GetFlagPosition: TRSTile;
var
  fx, fy: Integer;
begin
  fx := SmartGetFieldInt(0, hook_FlagX);
  fy := SmartGetFieldInt(0, hook_FlagY);
  if (fx < 0) or (fy < 0) then
    Result := NULL_RSTILE
  else
    Result := RSTile(SmartGetFieldInt(0, hook_BaseX) + fx,
                     SmartGetFieldInt(0, hook_BaseY) + fy);
end;

function ClickTile(const Tile: TRSTile): Boolean;
var
  MousePosition: TPoint;
  MouseX, MouseY: Integer;
begin
  Result := False;
  if (TileOnMinimap(Tile)) then
  begin
    MousePosition := TileToMinimap(Tile);
    MMouse(MousePosition.x + RandomRange(-5, 5), MousePosition.y + RandomRange(-5, 5), 0, 0);
    MousePosition := TileToMinimap(Tile);
    if (Distance(MouseX, MouseY, MousePosition.x, MousePosition.y) > 5) then
    begin
      if (not TileOnMinimap(Tile)) then
        Exit;
      Mouse(MousePosition.x + RandomRange(-5, 5), MousePosition.y + RandomRange(-5, 5), 0, 0, True);
    end else
      Mouse(MouseX, MouseY, 0, 0, True);
    Result := True;
  end;
end;