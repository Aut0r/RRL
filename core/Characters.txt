{=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=
RRL - Reflection Resource Library
Characters routines.

---------------------------------------------------------

 * function r_GetCharacterAnimation(const CharPath: LongInt; const Free: Boolean): Integer;
     By: Timer
 * function r_GetCharacterLocation(const CharPath: LongInt; const Free: Boolean): TRSTile;
     By: Timer
 * function r_GetCharacterMovement(const CharPath: LongInt; const Free: Boolean): Integer;
     By: Timer
 * function r_GetCharacterLoopCycleStatus(const CharPath: LongInt; const Free: Boolean): Integer;
     By: Timer
 * function r_GetCharacterFighting(const CharPath: LongInt; const Free: Boolean): Boolean;
     By: Timer
 * function r_GetCharacterHeight(const CharPath: LongInt; const Free: Boolean): Extended;
     By: Timer
 * function r_GetCharacterOrientation(const CharPath: LongInt; const Free: Boolean): Integer;
     By: Timer
 * function r_GetCharacterLevel(const CharPath: LongInt; const NPC, Free: Boolean): Integer;
     By: Timer
 * function r_GetCharacterInteracting(const CharPath: LongInt; const Free: Boolean): LongInt;
     By: Timer
 * function r_GetCharacterHPRatio(const CharPath: LongInt; const Free: Boolean): Integer;
     By: Timer
=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=}

function NULL_RSTILE: TRSTile; forward;

function r_GetCharacterAnimation(const CharPath: LongInt; const Free: Boolean): Integer;
begin
  try
    Result := SmartGetFieldInt(CharPath, r_Hooks[hook_Character_Animation]);
  finally // We want to rid of memory leaks.
    try
      if (Free) then
        SmartFreeObject(CharPath);
    except
      Result := -1;
      WriteLn('There was an issue with GetCharacterAnimation, tried to close a memory leak(?), dunno if it''s still there or not.');
    end;
  end;
end;

function r_GetCharacterLocation(const CharPath: LongInt; const Free: Boolean): TRSTile;
begin
  try
    Result.x := SmartGetFieldInt(0, r_Hooks[hook_BaseX]) + SmartGetFieldInt(CharPath, r_Hooks[hook_Character_X]) div 512;
    Result.y := SmartGetFieldInt(0, r_Hooks[hook_BaseY]) + SmartGetFieldInt(CharPath, r_Hooks[hook_Character_Y]) div 512;
  finally // We want to rid of memory leaks.
    try
      if (Free) then
        SmartFreeObject(CharPath);
    except
      Result := NULL_RSTILE;
      WriteLn('There was an issue with GetCharacterAnimation, tried to close a memory leak(?), dunno if it''s still there or not.');
    end;
  end;
end;

function r_GetCharacterMovement(const CharPath: LongInt; const Free: Boolean): Integer;
begin
  try
    Result := SmartGetFieldInt(CharPath, r_Hooks[hook_Character_Movement]);
  finally // We want to rid of memory leaks.
    try
      if (Free) then
        SmartFreeObject(CharPath);
    except
      Result := -1;
      WriteLn('There was an issue with GetCharacterMovement, tried to close a memory leak(?), dunno if it''s still there or not.');
    end;
  end;
end;

function r_GetCharacterLoopCycleStatus(const CharPath: LongInt; const Free: Boolean): Integer;
begin
  try
    Result := SmartGetFieldInt(CharPath, r_Hooks[hook_Character_LoopCycleStatus]);
  finally // We want to rid of memory leaks.
    try
      if (Free) then
        SmartFreeObject(CharPath);
    except
      Result := -1;
      WriteLn('There was an issue with GetCharacterLoopCycleStatus, tried to close a memory leak(?), dunno if it''s still there or not.');
    end;
  end;
end;

function r_GetCharacterFighting(const CharPath: LongInt; const Free: Boolean): Boolean;
begin
  try
    Result := SmartGetFieldInt(CharPath, r_Hooks[hook_Character_LoopCycleStatus]) >
              SmartGetFieldInt(0, r_Hooks[hook_LoopCycle]);
  finally // We want to rid of memory leaks.
    try
      if (Free) then
        SmartFreeObject(CharPath);
    except
      Result := False;
      WriteLn('There was an issue with GetCharacterFighting, tried to close a memory leak(?), dunno if it''s still there or not.');
    end;
  end;
end;

function r_GetCharacterHeight(const CharPath: LongInt; const Free: Boolean): Extended;
begin
  try
    Result := iAbs(SmartGetFieldInt(CharPath, r_Hooks[hook_Character_Height]));
  finally // We want to rid of memory leaks.
    try
      if (Free) then
        SmartFreeObject(CharPath);
    except
      Result := -1;
      WriteLn('There was an issue with GetCharacterHeight, tried to close a memory leak(?), dunno if it''s still there or not.');
    end;
  end;
end;

function r_GetCharacterOrientation(const CharPath: LongInt; const Free: Boolean): Integer;
begin
  try
    Result := Round(FixD(180 + (SmartGetFieldInt(CharPath, r_Hooks[hook_Character_Orientation]) * 45) / 2048));
  finally // We want to rid of memory leaks.
    try
      if (Free) then
        SmartFreeObject(CharPath);
    except
      Result := -1;
      WriteLn('There was an issue with GetCharacterOrientation, tried to close a memory leak(?), dunno if it''s still there or not.');
    end;
  end;
end;

function r_GetCharacterLevel(const CharPath: LongInt; const NPC, Free: Boolean): Integer;
begin
  try
    if (NPC) then
      Result := SmartGetFieldInt(CharPath, r_Hooks[hook_NPCDefinition_Level])
    else
      Result := SmartGetFieldInt(CharPath, r_Hooks[hook_Player_Level]);
  finally // We want to rid of memory leaks.
    try
      if (Free) then
        SmartFreeObject(CharPath);
    except
      Result := -1;
      WriteLn('There was an issue with GetCharacterLevel, tried to close a memory leak(?), dunno if it''s still there or not.');
    end;
  end;
end;

function r_GetCharacterInteracting(const CharPath: LongInt; const Free: Boolean): LongInt;
begin
  try
    Result := SmartGetFieldInt(CharPath, r_Hooks[hook_Character_Interacting]);
  finally // We want to rid of memory leaks.
    try
      if (Free) then
        SmartFreeObject(CharPath);
    except
      Result := -1;
      WriteLn('There was an issue with GetCharacterInteracting, tried to close a memory leak(?), dunno if it''s still there or not.');
    end;
  end;
end;

function r_GetCharacterHPRatio(const CharPath: LongInt; const Free: Boolean): Integer;
begin
  try
    Result := Round(SmartGetFieldInt(CharPath, r_Hooks[hook_Character_HPRatio]) * 100 / $FF);
  finally // We want to rid of memory leaks.
    try
      if (Free) then
        SmartFreeObject(CharPath);
    except
      Result := -1;
      WriteLn('There was an issue with GetCharacterHPRatio, tried to close a memory leak(?), dunno if it''s still there or not.');
    end;
  end;
end;