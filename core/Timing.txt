{=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=
RRL - Reflection Resource Library
Timing routines.

---------------------------------------------------------

 * function r_WaitForOptionEx(const Options: TStringArray; const Timeout: Integer): Boolean;
     By: Timer
 * function r_WaitForOption(const Option: string; const Timeout: Integer): Boolean;
     By: Timer
 * function r_WaitForAnimationExEx(const IDs: TIntegerArray; const Timeout: Integer): Boolean;
     By: Timer
 * function r_WaitForAnimationEx(const ID, Timeout: Integer): Boolean;
     By: Timer
 * function r_WaitForAnimation(const Timeout: Integer): Boolean;
     By: Timer
 * function r_WaitForUpTextEx(const Text: TStringArray; const TimeOut: Integer): Boolean;
     By: Timer
 * function r_WaitForUpText(const Text: string; const TimeOut: Integer): Boolean;
     By: Timer
 * function r_WaitForInteractEx(const Text: TStringArray; const TimeOut: Integer): Boolean;
     By: Timer
 * function r_WaitForInteract(const Text: string; const TimeOut: Integer): Boolean;
     By: Timer
=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=}

{
This work is licensed under the Creative Commons Attribution-NonCommercial-NoDerivs 3.0 Unported License.
To view a copy of this license, visit http://creativecommons.org/licenses/by-nc-nd/3.0/
or send a letter to Creative Commons, 171 Second Street, Suite 300, San Francisco, California, 94105, USA.

Copyright (C) 2010 - 2011 by Joe Haddad, all rights reserved.
This file is part of the RRL project (https://github.com/Timer/RRL).

For extended permissions please contact me by E-Mail, Timer150@Gmail.com.
}

function r_WaitForOptionEx(const Options: TStringArray; const Timeout: Integer): Boolean;
var
  Index, i: Integer;
  m: LongInt;
begin
  Result := False;
  m := GetSystemTime;
  while (not Result) and (GetSystemTime - m < Timeout) do
  begin
    for i := 0 to High(Options) do
    begin
      Index := r_GetMenuIndex(Options[i]);
      if (Index > -1) then
      begin
        Result := True;
        Exit;
      end;
    end;
    Wait(50);
  end;
end;

function r_WaitForOption(const Option: string; const Timeout: Integer): Boolean;
begin
  Result := r_WaitForOptionEx([Option], Timeout);
end;

function r_WaitForAnimationExEx(const IDs: TIntegerArray; const Timeout: Integer): Boolean;
var
  i: Integer;
  m: LongInt;
begin
  Result := False;
  m := GetSystemTime;
  while (not Result) and (GetSystemTime - m < Timeout) do
  begin
    for i := 0 to High(IDs) do
      if (r_GetAnimation = IDs[i]) then
      begin
        Result := True;
        Exit;
      end;
    Wait(50);
  end;
end;

function r_WaitForAnimationEx(const ID, Timeout: Integer): Boolean;
begin
  Result := r_WaitForOptionEx([ID], Timeout);
end;

function r_WaitForAnimation(const Timeout: Integer): Boolean;
var
  m: LongInt;
begin
  Result := False;
  m := GetSystemTime;
  while (not Result) and (GetSystemTime - m < Timeout) do
  begin
    if (r_GetAnimation > 0) then
      Result := True;
    Wait(50);
  end;
end;

function r_WaitForUpTextEx(const Text: TStringArray; const TimeOut: Integer): Boolean;
var
  m: LongInt;
  i: Integer;
  tt: string;
begin
  Result := False;
  m := GetSystemTime;
  while (not Result) and (GetSystemTime - m < TimeOut) do
  begin
    tt := r_GetUpText;
    for i := 0 to High(Text) do
      if (Pos(Text[i], tt) > 0) then
      begin
        Result := True;
        Exit;
      end;
    Wait(Random(10));
  end;
end;

function r_WaitForUpText(const Text: string; const TimeOut: Integer): Boolean;
begin
  Result := r_WaitForUpTextEx([Text], TimeOut);
end;

function r_WaitForInteractEx(const Text: TStringArray; const TimeOut: Integer): Boolean;
var
  m: LongInt;
  i: Integer;
begin
  m := GetSystemTime;
  while (GetSystemTime - m < TimeOut) do
  begin
    for i := 0 to High(Text) do
      if (WaitForOption(Text[i], 50)) then
      begin
        Result := r_Interact(Text[i]);
        if (Result) then
          Exit
        else
          while (r_IsMenuOpen) do
            MMouse(Random(MSX1), Random(MSY1), 0, 0);
      end;
  end;
end;

function r_WaitForInteract(const Text: string; const TimeOut: Integer): Boolean;
begin
  Result := r_WaitForInteract([Text], TimeOut);
end;