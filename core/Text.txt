{=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=
RRL - Reflection Resource Library
Text file.

---------------------------------------------------------

 * function r_GetTheTime: string;
     By: Timer
 * function r_GetTheDate: string;
     By: Timer
 * function r_GetTheMonth: string;
     By: Timer
 * function r_GetTimeRunning: string;
     By: Timer
=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=}

{
This work is licensed under the Creative Commons Attribution-NonCommercial-NoDerivs 3.0 Unported License.
To view a copy of this license, visit http://creativecommons.org/licenses/by-nc-nd/3.0/
or send a letter to Creative Commons, 171 Second Street, Suite 300, San Francisco, California, 94105, USA.

Copyright (C) 2010 - 2011 by Joe Haddad, all rights reserved.
This file is part of the RRL project (https://github.com/Timer/RRL).

For extended permissions please contact me by E-Mail, Timer150@Gmail.com.
}

function r_GetTheTime: string;
var
  Hour, Minz, Sec, MSec: Word;
  Padding: string;
begin
  DecodeTime(Now, Hour, Minz, Sec, MSec);
  Padding := 'AM';
  if (Hour > 12) then
  begin
    Hour := Hour - 12;
    Padding := 'PM';
  end else
    if (Hour = 12) then
      Padding := 'PM';
  Result := IntToStr(Hour) + ':' + IntToStr(Minz) + ':' + IntToStr(Sec) + ' ' + Padding;
end;

function r_GetTheDate: string;
var
  Year, Month, Day: Word;
  Months, suffixs: TStringArray;
  suffix: string;
begin
  DecodeDate(Date, Year, Month, Day);
  Months := ['January', 'February', 'March', 'April', 'May', 'June', 'July',
            'August', 'September', 'October', 'November', 'December'];
  suffixs := ['st', 'nd', 'rd'];
  if (InRange(Day mod 10, 1, 3)) and (not InRange(Day, 11, 13)) then
    suffix := suffixs[(Day mod 10) - 1]
  else
    suffix := 'th';
  Result := Months[Month - 1] + ' ' + IntToStr(Day) + suffix + ', ' + IntToStr(Year);
end;

function r_GetTheMonth: string;
var
  Year, Month, Day: Word;
  Months: TStringArray;
begin
  DecodeDate(Date, Year, Month, Day);
  Months := ['January', 'February', 'March', 'April', 'May', 'June', 'July',
            'August', 'September', 'October', 'November', 'December'];
  Result := Months[Month - 1];
end;

function r_GetTimeRunning: string;
var
  tr: LongInt;
  tD, tH, tM, tS: LongInt;
  TheTimeRInfo: array[0..3] of TStringArray;
  tDD, tHH, tMM, tSS: Boolean;
begin
  tr := GetTimeRunning;
  ConvertTime(tr, tH, tM, tS);
  TheTimeRInfo[0] := [' day, ', ' days, ', ' day ', ' days '];
  TheTimeRInfo[1] := [' hour, ', ' hours, ', ' hour ', ' hours'];
  TheTimeRInfo[2] := [' minute, ', ' minutes, ', ' minute', ' minutes '];
  TheTimeRInfo[3] := [' second', ' seconds'];
  tD := tH div 24;
  tDD := tD > 0;
  tHH := tH > 0;
  tMM := tM > 0;
  tSS := tS > 0;
  if (tDD) then
    tH := tH - (tD * 24);
  if (tDD) then
    if (tD > 1) then
      if (tHH) or (tMM) or (tSS) then
        Result := Result + IntToStr(tD) + TheTimeRInfo[0][1]
      else
        Result := Result + IntToStr(tD) + TheTimeRInfo[0][3]
    else
      if (tHH) or (tMM) or (tSS) then
        Result := Result + IntToStr(tD) + TheTimeRInfo[0][0]
      else
        Result := Result + IntToStr(tD) + TheTimeRInfo[0][2];
  if (tHH) then
    if (tH > 1) then
      if (tMM) or (tSS) then
        Result := Result + IntToStr(tH) + TheTimeRInfo[1][1]
      else
        Result := Result + IntToStr(tH) + TheTimeRInfo[1][3]
    else
      if (tMM) or (tSS) then
        Result := Result + IntToStr(tH) + TheTimeRInfo[1][0]
      else
        Result := Result + IntToStr(tH) + TheTimeRInfo[1][2];
  if (tMM) then
    if (tM > 1) then
      if (tSS) then
        Result := Result + IntToStr(tM) + TheTimeRInfo[2][1]
      else
        Result := Result + IntToStr(tM) + TheTimeRInfo[2][3]
    else
      if (tSS) then
        Result := Result + IntToStr(tM) + TheTimeRInfo[2][0]
      else
        Result := Result + IntToStr(tM) + TheTimeRInfo[2][2];
  if (tSS) then
    if (tS > 1) then
      Result := Result + IntToStr(tS) + TheTimeRInfo[3][1]
    else
      Result := Result + IntToStr(tS) + TheTimeRInfo[3][0];
end;