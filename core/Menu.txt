{=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=
RRL - Reflection Resource Library
Menu routines.

---------------------------------------------------------

 * function r_IsMenuOpen: Boolean;
     By: Timer
 * function r_IsMenuTabbed: Boolean;
     By: Timer
 * function r_GetMenuCount: Integer;
     By: Timer
 * function r_GetMenuText: TStringArray;
     By: Timer
 * function r_GetMenuIndex(Text: string): Integer;
     By: Timer
 * function r_ClickMenuIndex(Index: Integer): Boolean;
     By: Timer
 * function r_Interact(Option: string): Boolean;
     By: Timer
=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=}

{
This work is licensed under the Creative Commons Attribution-NonCommercial-NoDerivs 3.0 Unported License.
To view a copy of this license, visit http://creativecommons.org/licenses/by-nc-nd/3.0/
or send a letter to Creative Commons, 171 Second Street, Suite 300, San Francisco, California, 94105, USA.

Copyright (C) 2010 - 2011 by Joe Haddad, all rights reserved.
This file is part of the RRL project (https://github.com/Timer/RRL).

For extended permissions please contact me by E-Mail, Timer150@Gmail.com.
}

function r_IsMenuOpen: Boolean;
begin
  Result := _InvokeBoolean(0, r_Hooks[hook_MenuOpen]);
end;

function r_IsMenuTabbed: Boolean;
begin
  Result := _InvokeBoolean(0, r_Hooks[hook_MenuTabbed]);
end;

function r_GetMenuCount: Integer;
begin
  Result := _InvokeInteger(0, r_Hooks[hook_MenuCount]);
end;

function r_GetMenuText: TStringArray;
var
  Nodes, Head, Next, Count, JavaString, Last: LongInt;
  Item: string;
begin
  try
    Nodes := _InvokeObject(0, r_Hooks[hook_MenuNodeList]);
    Head := _InvokeObject(Nodes, r_Hooks[hook_Node_Head]);
    if (r_IsMenuTabbed) then
      Next := Head
    else
      Next := _InvokeObject(Head, r_Hooks[hook_Node_Next]);
    Count := r_GetMenuCount;
    SetLength(Result, Count);
    repeat
      JavaString := _InvokeObject(Next, r_Hooks[hook_Menu_Action]);
      if (JavaString = 0) then
      begin
        _FreeObject(JavaString);
        Break;
      end;
      Item := r_GetString(JavaString);
      _FreeObject(JavaString);
      JavaString := _InvokeObject(next, r_Hooks[hook_Menu_Option]);
      Item := Item + ' ' + r_GetString(JavaString);
      _FreeObject(JavaString);
      Result[Count - 1] := r_RemoveJunk(Item);
      Last := Next;
      Next := _InvokeObject(Last, r_Hooks[hook_Node_Next]);
      _FreeObject(Last);
      Dec(Count);
    until (Count <= 0);
    _FreeObject(Next);
    _FreeObject(Head);
    _FreeObject(Nodes);
  except
    try
      _FreeObject(Next);
    except
    end;
    try
      _FreeObject(Last);
    except
    end;
    try
      _FreeObject(Head);
    except
    end;
    try
      _FreeObject(Nodes);
    except
    end;
    WriteLn('GetMenuText failed.. looping again [possible infinite loop].');
    Wait(50);
    Result := r_GetMenuText;
  end;
end;

function r_GetMenuIndex(Text: string): Integer;
var
  Menu: TStringArray;
  i: Integer;
begin
  Menu := r_GetMenuText;
  Result := -1;
  if (High(Menu) > -1) then
    for i := 0 to High(Menu) do
      if (Pos(Lowercase(Text), Lowercase(Menu[i])) <> 0) then
      begin
        Result := i;
        Exit;
      end;
end;

function r_ClickMenuIndex(Index: Integer): Boolean;
var
  AllItems: TStringArray;
  Item: string;
  xOff, yOff: Integer;
  P: TPoint;
  T, MC: LongInt;
begin
  mc := 1;
  AllItems := r_GetMenuText;
  if (Length(AllItems) < Index) then
  begin
    Result := False;
    Exit;
  end;
  if (Index = -1) then
  begin
    Result := False;
    Exit;
  end;
  if (not r_IsMenuOpen) then
  begin
    GetMousePos(xOff, yOff);
    r_ClickMouse(xOff, yOff, 0, 0, False);
    T := GetSystemTime;
    while (GetSystemTime - T < 1000) and (not r_IsMenuOpen) do
      Wait(50);
    if (not r_IsMenuOpen) then
      Exit;
    AllItems := r_GetMenuText;
    if (Length(AllItems) < Index) then
    begin
      Result := False;
      Exit;
    end;
  end;
  Item := AllItems[Index];
  P := Point(_InvokeInteger(0, r_Hooks[hook_MenuX]), _InvokeInteger(0, r_Hooks[hook_MenuY]));
  if (r_IsMenuTabbed) then
  begin
    //We can't click sub-menus yet!
    Result := False;
  end else
  begin
    xOff := RandomRange(4, 4 + Random(Length(Item) * 4 - 4));
    yOff := 21 + (16 * index) + RandomRange(2, 10);
    r_ClickMouse(P.x + xOff, P.y + yOff, 0, 0, True);
    Wait(RandomRange(80, 100));
    Result := not r_IsMenuOpen;
    while (r_IsMenuOpen) do
    begin
      r_MoveMouse(Random(R_SCREEN_MAIN_X2), Random(R_SCREEN_MAIN_Y2), 0, 0);
      Wait(RandomRange(100, 200));
    end;
    Exit;
  end;
  while (r_IsMenuOpen) do
  begin
    r_MoveMouse(Random(R_SCREEN_MAIN_X2), Random(R_SCREEN_MAIN_Y2), 0, 0);
    Wait(RandomRange(100, 200));
  end;
end;

function r_Interact(Option: string): Boolean;
var
  Index{$IFNDEF SIMBA}, x, y{$ENDIF}: Integer;
  AllItems: TStringArray;
  T: LongInt;
begin
  Index := r_GetMenuIndex(Option);
  if (Index = -1) then
  begin
    Result := False;
    Exit;
  end;
  AllItems := r_GetMenuText;
  if (Length(AllItems) < Index) then
  begin
    Result := False;
    Exit;
  end;
  if (Index = 0) then
  begin
    GetMousePos(x, y);
    r_ClickMouse(x, y, 0, 0, True);
  end else
  begin
    if (not r_IsMenuOpen) then
    begin
      GetMousePos(x, y);
      r_ClickMouse(x, y, 0, 0, False);
      T := GetSystemTime;
      while (GetSystemTime - T < 1000) and (not r_IsMenuOpen) do
        Wait(50);
      if (not r_IsMenuOpen) then
        Exit;
      AllItems := r_GetMenuText;
      if (Length(AllItems) < Index) then
      begin
        Result := False;
        Exit;
      end;
    end;
    Index := r_GetMenuIndex(Option);
    Result := r_ClickMenuIndex(Index);
  end;
end;