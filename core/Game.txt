{=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=
RRL - Reflection Resource Library
Game functions

---------------------------------------------------------

 * function r_GetLoginIndex: Integer;
     By: Timer
 * function r_IsLoggedIn: Boolean;
     By: Timer
 * function r_GetSetting(Index: Integer): Integer;
     By: Timer
 * procedure r_DeleteRenderMatrix(var RData: TRenderData; var Render: TRender);
     By: Timer
 * procedure r_FetchRenderMatrix(var RData: TRenderData; var Render: TRender);
     By: Timer
=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=}

{
This work is licensed under the Creative Commons Attribution-NonCommercial-NoDerivs 3.0 Unported License.
To view a copy of this license, visit http://creativecommons.org/licenses/by-nc-nd/3.0/
or send a letter to Creative Commons, 171 Second Street, Suite 300, San Francisco, California, 94105, USA.

Copyright (C) 2010 - 2011 by Joe Haddad, all rights reserved.
This file is part of the RRL project (https://github.com/Timer/RRL).

For extended permissions please contact me by E-Mail, Timer150@Gmail.com.
}

function r_GetLoginIndex: Integer;
begin
  try
    Result := SmartGetFieldInt(0, hook_Login_Index);
  except
    Result := -1;
  end;
end;

function r_IsLoggedIn: Boolean;
begin
  Result := (r_GetLoginIndex = 10) or (r_GetLoginIndex = 11);
end;

function r_GetSetting(Index: Integer): Integer;
var
  SettingsArray, Data, DataLength: Integer;
begin
  Result := -1;
  try
    SettingsArray := SmartGetFieldObject(0, hook_Settings);
    Data := SmartGetFieldObject(SettingsArray, hook_SettingsData);
    DataLength := SmartGetFieldArraySize(Data, '', 1);
    if (Index >= DataLength) then
      Exit;
    Result := SmartGetFieldArrayInt(Data, '', Index);
  finally
    try
      SmartFreeObject(SettingsArray);
    except
    end;
    try
      SmartFreeObject(Data);
    except
    end;
  end;
end;

function NULL_RENDER_DATA: TRenderData;
var
  RD: TRenderData;
begin
  with RD do
  begin
    xOffset := -1;
    yOffset := -1;
    zOffset := -1;
    xX := -1;
    xY := -1;
    xZ := -1;
    yX := -1;
    yY := -1;
    yZ := -1;
    zX := -1;
    zY := -1;
    zZ := -1;
  end;
  Result := RD;
end;

function NULL_RENDER: TRender;
var
  R: TRender;
begin
  with R do
  begin
    xScale := -1;
    yScale := -1;
    xMin := -1;
    yMin := -1;
    zMin := -1;
    xMax := -1;
    yMax := -1;
    zMax := -1;
  end;
  Result := R;
end;

procedure r_DeleteRenderMatrix(var RData: TRenderData; var Render: TRender);
begin
  RData := NULL_RENDER_DATA;
  Render := NULL_RENDER;
end;

procedure r_FetchRenderMatrix(var RData: TRenderData; var Render: TRender);
var
  ViewPortPath, ToolKitPath, l: LongInt;
begin
  if (not (RData = NULL_RENDER_DATA)) or (not (Render = NULL_RENDER)) then
    r_DeleteRenderMatrix(RData, Render);
  l := GetSystemTime;
  while (GetSystemTime - l < 5000) and (RData.zX <= 0) and (RData.zY <= 0) do
    try
      ToolKitPath := SmartGetFieldObject(0, hook_ToolKit);
      ViewPortPath := SmartGetFieldObject(ToolKitPath, hook_ViewPort);
      with RData do
      begin
        xOffset := SmartGetFieldFloat(ViewPortPath, hook_ViewPort_xOffset);
        yOffset := SmartGetFieldFloat(ViewPortPath, hook_ViewPort_yOffset);
        zOffset := SmartGetFieldFloat(ViewPortPath, hook_ViewPort_zOffset);
        xX := SmartGetFieldFloat(ViewPortPath, hook_ViewPort_xX);
        xY := SmartGetFieldFloat(ViewPortPath, hook_ViewPort_xY);
        xZ := SmartGetFieldFloat(ViewPortPath, hook_ViewPort_xZ);
        yX := SmartGetFieldFloat(ViewPortPath, hook_ViewPort_yX);
        yY := SmartGetFieldFloat(ViewPortPath, hook_ViewPort_yY);
        yZ := SmartGetFieldFloat(ViewPortPath, hook_ViewPort_yZ);
        zX := SmartGetFieldFloat(ViewPortPath, hook_ViewPort_zX);
        zY := SmartGetFieldFloat(ViewPortPath, hook_ViewPort_zY);
        zZ := SmartGetFieldFloat(ViewPortPath, hook_ViewPort_zZ);
      end;
      with Render do
      begin
        xScale := SmartGetFieldInt(ToolKitPath, hook_ToolKit_xScale);
        yScale := SmartGetFieldInt(ToolKitPath, hook_ToolKit_yScale);
        xMin := SmartGetFieldInt(ToolKitPath, hook_ToolKit_xMin);
        yMin := SmartGetFieldInt(ToolKitPath, hook_ToolKit_yMin);
        zMin := SmartGetFieldInt(ToolKitPath, hook_ToolKit_zMin);
        xMax := SmartGetFieldInt(ToolKitPath, hook_ToolKit_xMax);
        yMax := SmartGetFieldInt(ToolKitPath, hook_ToolKit_yMax);
        zMax := SmartGetFieldInt(ToolKitPath, hook_ToolKit_zMax);
      end;
    finally
      try
        SmartFreeObject(ViewPortPath);
      except
      end;
      try
        SmartFreeObject(ToolKitPath);
      except
      end;
    end;
end;