{=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=
RRL - Reflection Resource Library
Players file.

---------------------------------------------------------

 * function r_GetAllPlayers: TPlayerArray;
     By: Timer
 * function r_GetAllPlayersByLevels(const fLevels: TIntegerArray): TPlayerArray;
     By: Timer
 * function r_GetAllPlayersByLevel(const fLevel: Integer): TPlayerArray;
     By: Timer
 * function r_GetAllPlayersByNames(const Names: TStringArray): TPlayerArray;
     By: Timer
 * function r_GetAllPlayersByName(const Name: string): TPlayerArray;
     By: Timer
 * function r_SortPlayersEx(const Arr: TPlayerArray; const From: TRSTile): TPlayerArray;
     By: Timer
 * function r_SortPlayers(const Arr: TPlayerArray): TPlayerArray;
     By: Timer
 * function r_GetClosestPlayerByLevels(const fLevels: TIntegerArray): TPlayer;
     By: Timer
 * function r_GetClosestPlayerByLevel(const fLevel: Integer): TPlayer;
     By: Timer
 * function r_GetClosestPlayerByNames(const Names: TStringArray): TPlayer;
     By: Timer
 * function r_GetClosestPlayerByName(const Name: string): TPlayer;
     By: Timer
=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=}

{
This work is licensed under the Creative Commons Attribution-NonCommercial-ShareAlike 3.0 Unported License.
To view a copy of this license, visit http://creativecommons.org/licenses/by-nc-sa/3.0/
or send a letter to Creative Commons, 171 Second Street, Suite 300, San Francisco, California, 94105, USA.

Copyright (C) 2010 - 2011 by Joe Haddad, all rights reserved.
This file is part of the RRL project (https://github.com/Timer/RRL).

For extended permissions please contact me by E-Mail, Timer150@Gmail.com.
}

function NULL_PLAYER: TPlayer;
begin
  with Result do
  begin
    Index := -1;
    Team := -1;
    Level := -1;
    Name := '';
    with Character do
    begin
      Animation := -1;
      Orientation := -1;
      LoopCycleStatus := -1;
      HPRatio := -1;
      Speed := -1;
      Height := -1.0;
      Location := NULL_RSTILE;
      Interacting := -1;
      Model := -1;
    end;
  end;
end;

function r_GetAllPlayers: TPlayerArray;
var
  CharPath, CharDefPath, Str: LongInt;
  i, ii, Count, Index, C: Integer;
begin
  try
    Count := SmartGetFieldInt(0, r_Hooks[hook_PlayerCount]);
    if (Count < 1) then
      Exit;
    SetLength(Result, Count);
    for ii := 0 to Count - 1 do
      try
        Index := SmartGetFieldArrayInt(0, r_Hooks[hook_PlayerIndexes], ii);
        CharPath := SmartGetFieldArrayObject(0, r_Hooks[hook_Players], Index);
        CharDefPath := SmartGetFieldObject(CharPath, r_Hooks[hook_Player_Definition]);
        with Result[C] do
        begin
          with Character do
          begin
            Animation := r_GetCharacterAnimation(CharPath, False);
            Orientation := r_GetCharacterOrientation(CharPath, False);
            LoopCycleStatus := r_GetCharacterLoopCycleStatus(CharPath, False);
            HPRatio := r_GetCharacterHPRatio(CharPath, False);
            Speed := r_GetCharacterMovement(CharPath, False);
            Height := r_GetCharacterHeight(CharPath, False);
            Location := r_GetCharacterLocation(CharPath, False);
            Interacting := r_GetCharacterInteracting(CharPath, False);
            Model := 0;//TODO model.
            IsFighting := LoopCycleStatus > SmartGetFieldInt(0, r_Hooks[hook_LoopCycle]);
            IsMoving := Speed > 0;
            IsAnimating := Animation > -1;
            IsIdle := (not IsFighting) and (not IsAnimating) and (not IsMoving);
          end;
          Index := -1;
          Team := SmartGetFieldInt(CharPath, r_Hooks[hook_Player_Team]);
          Level := SmartGetFieldInt(CharPath, r_Hooks[hook_Player_Level]);
          Str := SmartGetFieldObject(CharPath, r_Hooks[hook_Player_Name]);
          Name := r_GetString(Str);
          SmartFreeObject(Str);
          {for i := 0 to 24 do
          begin
            Levels[i] := SmartGetFieldArrayInt(CharPath, r_Hooks[Player_SkillLevels], i);
            Experiences[i] := ;
          end;}
          for i := 0 to 10 do
            Equipment[i] := SmartGetFieldArrayInt(CharDefPath, r_Hooks[hook_PlayerDefinition_Equipment], i) - 1073741824;
          Inc(C);
        end;
      finally
        try
          SmartFreeObject(CharPath);
        except
        end;
        try
          SmartFreeObject(CharDefPath);
        except
        end;
      end;
  except
  end;
end;

function r_GetAllPlayersByLevels(const fLevels: TIntegerArray): TPlayerArray;
var
  PArray: TPlayerArray;
  i, l, C, ii, ll: Integer;
begin
  PArray := r_GetAllPlayers;
  l := Length(PArray);
  ll := Length(fLevels);
  SetLength(Result, l);
  for i := 0 to l - 1 do
    for ii := 0 to ll - 1 do
      if (PArray[i].Level = fLevels[ii]) then
      begin
        Result[C] := PArray[i];
        Inc(C);
        Break;
      end;
  SetLength(Result, C);
end;

function r_GetAllPlayersByLevel(const fLevel: Integer): TPlayerArray;
begin
  Result := r_GetAllPlayersByLevels([fLevel]);
end;

function r_GetAllPlayersByNames(const Names: TStringArray): TPlayerArray;
var
  PArray: TPlayerArray;
  i, l, C, ii, ll: Integer;
begin
  PArray := r_GetAllPlayers;
  l := Length(PArray);
  ll := Length(Names);
  SetLength(Result, l);
  for i := 0 to l - 1 do
    for ii := 0 to ll - 1 do
      if (Pos(Lowercase(Names[ii]), Lowercase(PArray[i].Name)) > 0) then
      begin
        Result[C] := PArray[i];
        Inc(C);
        Break;
      end;
  SetLength(Result, C);
end;

function r_GetAllPlayersByName(const Name: string): TPlayerArray;
begin
  Result := r_GetAllPlayersByNames([Name]);
end;

function r_SortPlayersEx(const Arr: TPlayerArray; const From: TRSTile): TPlayerArray;
var
  i, ii, L: LongInt;
  TPA: TPointArray;
begin
  L := Length(Arr);
  if (L < 1) then
    Exit;
  SetLength(Result, L);
  SetLength(TPA, L);
  for i := 0 to L - 1 do
    TPA[i] := Point(Arr[i].Character.Location.x, Arr[i].Character.Location.y);
  SortTPAFrom(TPA, Point(From.x, From.y));
  for i := 0 to L - 1 do
    for ii := 0 to L - 1 do
      if (TPA[i].x = Arr[ii].Character.Location.x) and (TPA[i].y = Arr[ii].Character.Location.y) then
      begin
        Result[i] := Arr[ii];
        Break;
      end;
end;

function r_SortPlayers(const Arr: TPlayerArray): TPlayerArray;
begin
  Result := r_SortPlayersEx(Arr, r_GetLocation);
end;

function r_GetClosestPlayerByLevels(const fLevels: TIntegerArray): TPlayer;
var
  PArray, OurPs: TPlayerArray;
  C: Integer;
begin
  Result := NULL_PLAYER;
  PArray := r_GetAllPlayersByLevels(fLevels);
  SetLength(OurPs, C);
  OurPs := r_SortPlayers(PArray);
  if (Length(OurPs) > 0) then
    Result := OurPs[0];
end;

function r_GetClosestPlayerByLevel(const fLevel: Integer): TPlayer;
begin
  Result := r_GetClosestPlayerByLevels([fLevel]);
end;

function r_GetClosestPlayerByNames(const Names: TStringArray): TPlayer;
var
  PArray, OurPs: TPlayerArray;
  C: Integer;
begin
  Result := NULL_PLAYER;
  PArray := r_GetAllPlayersByNames(Names);
  SetLength(OurPs, C);
  OurPs := r_SortPlayers(PArray);
  if (Length(OurPs) > 0) then
    Result := OurPs[0];
end;

function r_GetClosestPlayerByName(const Name: string): TPlayer;
begin
  Result := r_GetClosestPlayerByNames([Name]);
end;