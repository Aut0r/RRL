{=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=
RRL - Reflection Resource Library
Tab handling

---------------------------------------------------------

  * function r_IsRunning: Boolean;
      By: Timer
  * function r_GetRunEnergy: Integer;
      By: Timer
  * function r_GetPrayerPoints: Integer;
      By: Timer
  * function r_GetCurrentHealth: Integer;
      By: Timer
  * procedure r_SetRun(const Run: Boolean);
      By: Timer
  * function r_GetSkillLevel(const SkillIndex: Integer): Integer;
      By: Timer
  * function r_GetSkillExperience(const SkillIndex: Integer): Integer;
      By: Timer
  * function r_GetTabInterface(const Tab: Integer): LongInt;
      By: Timer
  * function r_GetCurrentTab: Integer;
      By: Timer
  * function r_GetTabBox(const Tab: Integer): TBox;
      By: Timer
  * function r_OpenTab(const Tab: Integer): Boolean;
      By: Timer
  * function r_Logout(const Lobby: Boolean): Boolean;
      By: Timer
=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=}

{
This work is licensed under the Creative Commons Attribution-NonCommercial-ShareAlike 3.0 Unported License.
To view a copy of this license, visit http://creativecommons.org/licenses/by-nc-sa/3.0/
or send a letter to Creative Commons, 171 Second Street, Suite 300, San Francisco, California, 94105, USA.

Copyright (C) 2010 - 2011 by Joe Haddad, all rights reserved.
This file is part of the RRL project (https://github.com/Timer/RRL).

For extended permissions please contact me by E-Mail, Timer150@Gmail.com.
}

function r_IsRunning: Boolean;
begin
  Result := r_GetSetting(173) = 1;
end;

function r_GetRunEnergy: Integer;
begin
  Result := StrToIntDef(r_GetInterfaceText(750, 5), -1);
end;

function r_GetPrayerPoints: Integer;
begin
  Result := StrToIntDef(r_GetInterfaceText(749, 4), -1);
end;

function r_GetCurrentHealth: Integer;
begin
  Result := StrToIntDef(r_GetInterfaceText(748, 8), -1);
end;

procedure r_SetRun(const Run: Boolean);
begin
  if (Run) xor (r_IsRunning) then
    r_ClickMouse(715, 95, 10, 10, True);
end;

function r_GetSkillLevel(const SkillIndex: Integer): Integer;
begin
  Result := SmartGetFieldArrayInt(0, r_Hooks[hook_Levels], SkillIndex);
end;

function r_GetSkillExperience(const SkillIndex: Integer): Integer;
begin
  Result := SmartGetFieldArrayInt(0, r_Hooks[hook_Experience], SkillIndex);
end;

function r_GetTabInterface(const Tab: Integer): LongInt;
var
  GameInterface: Integer;
begin
  GameInterface := 548;
  Result := -1;
  case (Tab) of
  	R_TAB_ATTACK: Result := 128;
  	R_TAB_ACHIEVEMENTS: Result := 129;
  	R_TAB_STATS: Result := 130;
  	R_TAB_QUESTS: Result := 131;
  	R_TAB_INVENTORY: Result := 132;
  	R_TAB_EQUIPMENT: Result := 133;
  	R_TAB_PRAYER: Result := 134;
  	R_TAB_MAGIC: Result := 135;
  	R_TAB_SUMMONING: Result := 98;
  	R_TAB_FRIENDS: Result := 99;
  	R_TAB_IGNORE: Result := 10;
  	R_TAB_CLAN: Result := 101;
  	R_TAB_OPTIONS: Result := 102;
  	R_TAB_CONTROLS: Result := 103;
  	R_TAB_MUSIC: Result := 104;
  	R_TAB_NOTES: Result := 105;
  	R_TAB_LOGOUT: Result := 181;
  end;
  if (Result <> -1) then
    Result := r_GetInterface(GameInterface, Result);
end;

function r_GetCurrentTab: Integer;
var
  l, i, Texture: Integer;
  TabHandle: LongInt;
begin
  l := GetArrayLength(R_TAB_NAMES);
  Dec(l);
  for i := 0 to l do
  begin
    TabHandle := r_GetTabInterface(Result);
    if (TabHandle  <> -1) then
    begin
      Texture := r_GetInterfaceTextureEx(TabHandle, True);
      if (Texture <> -1) then
      begin
        Result := i;
        Exit;
      end;
    end;
  end;
  Result := -1;
end;

function r_GetTabBox(const Tab: Integer): TBox;
var
  GameInterface, ci: Integer;
begin
  GameInterface := 548;
  ci := -1;
  case (Tab) of
  	R_TAB_ATTACK: ci := 128;
  	R_TAB_ACHIEVEMENTS: ci := 129;
  	R_TAB_STATS: ci := 130;
  	R_TAB_QUESTS: ci := 131;
  	R_TAB_INVENTORY: ci := 132;
  	R_TAB_EQUIPMENT: ci := 133;
  	R_TAB_PRAYER: ci := 134;
  	R_TAB_MAGIC: ci := 135;
  	R_TAB_SUMMONING: ci := 98;
  	R_TAB_FRIENDS: ci := 99;
  	R_TAB_IGNORE: ci := 100;
  	R_TAB_CLAN: ci := 101;
  	R_TAB_OPTIONS: ci := 102;
  	R_TAB_CONTROLS: ci := 103;
  	R_TAB_MUSIC: ci := 104;
  	R_TAB_NOTES: ci := 105;
  	R_TAB_LOGOUT: ci := 181;
  end;
  if (ci <> -1) then
    if (ci >= 181) then
      Result := r_GetInterfaceBox(Point(516, 0), GameInterface, ci)
    else if (ci >= 128) then
      Result := r_GetInterfaceBox(Point(516, 168), GameInterface, ci)
    else
      Result := r_GetInterfaceBox(Point(519, 466), GameInterface, ci)
  else
    Result := IntToBox(-1, -1, -1, -1);
end;

function r_OpenTab(const Tab: Integer): Boolean;
var
  Box: TBox;
begin
  Result := True;
  if (r_GetCurrentTab = Tab) then
    Exit;
  Box := r_GetTabBox(Tab);
  r_ClickMouseBox(Box.x1, Box.y1, Box.x2, Box.y2, True);
  Wait(RandomRange(400, 600));
  Result := r_GetCurrentTab = Tab;
end;

function r_Logout(const Lobby: Boolean): Boolean;
var
  Box: TBox;
  m: LongInt;
  iI: Integer;
begin
  if (r_OpenTab(R_TAB_LOGOUT)) then
  begin
    if (Lobby) then
      iI := 1
    else
      iI := 6;
    Box := r_GetInterfaceBox(Point(547, 205), 182, iI);
    r_ClickMouseBox(Box.x1, Box.y1, Box.x2, Box.y2, True);
    r_MarkTime(m);
    while (r_GetTimeFromMark(m) < 6000) and (r_IsLoggedIn) do
      Wait(50);
    Result := not r_IsLoggedIn;
    Exit;
  end;
  Result := False;
end;