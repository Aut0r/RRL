{=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=
RRL - Reflection Resource Library
Tab handling

---------------------------------------------------------

  * function r_IsRunning: Boolean;
      By: Timer
  * function r_GetRunEnergy: Integer;
      By: Timer
  * function r_GetPrayerPoints: Integer;
      By: Timer
  * function r_GetCurrentHealth: Integer;
      By: Timer
  * procedure r_SetRun(const Run: Boolean);
      By: Timer
  * function r_GetSkillLevel(const SkillIndex: Integer): Integer;
      By: Timer
  * function r_GetSkillExperience(const SkillIndex: Integer): Integer;
      By: Timer
  * function r_GetTabInterface(const Tab: Integer): LongInt;
      By: Timer
  * function r_GetCurrentTab: Integer;
      By: Timer
  * function r_GetTabBox(const Tab: Integer): TBox;
      By: Timer
  * function r_OpenTab(const Tab: Integer): Boolean;
      By: Timer
  * function r_Logout: Boolean;
      By: Timer
=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=}

{
This work is licensed under the Creative Commons Attribution-NonCommercial-NoDerivs 3.0 Unported License.
To view a copy of this license, visit http://creativecommons.org/licenses/by-nc-nd/3.0/
or send a letter to Creative Commons, 171 Second Street, Suite 300, San Francisco, California, 94105, USA.

Copyright (C) 2010 - 2011 by Joe Haddad, all rights reserved.
This file is part of the RRL project (https://github.com/Timer/RRL).

For extended permissions please contact me by E-Mail, Timer150@Gmail.com.
}

function r_IsRunning: Boolean;
begin
  Result := r_GetSetting(173) = 1;
end;

function r_GetRunEnergy: Integer;
begin
  Result := StrToIntDef(r_GetInterfaceText(750, 5), -1);
end;

function r_GetPrayerPoints: Integer;
begin
  Result := StrToIntDef(r_GetInterfaceText(749, 4), -1);
end;

function r_GetCurrentHealth: Integer;
begin
  Result := StrToIntDef(r_GetInterfaceText(748, 8), -1);
end;

procedure r_SetRun(const Run: Boolean);
begin
  if (Run) xor (r_IsRunning) then
    r_ClickMouse(715, 95, 10, 10, True);
end;

function r_GetSkillLevel(const SkillIndex: Integer): Integer;
begin
  Result := SmartGetFieldArrayInt(0, r_Hooks[hook_Levels], SkillIndex);
end;

function r_GetSkillExperience(const SkillIndex: Integer): Integer;
begin
  Result := SmartGetFieldArrayInt(0, r_Hooks[hook_Experience], SkillIndex);
end;

function r_GetTabInterface(const Tab: Integer): LongInt;
var
  GameInterface, i: Integer;
  Components: TIntegerArray;
  Actions: TStringArray;
begin
  GameInterface := 548;
  Components := r_GetInterfaceComponents(GameInterface);
  for i := 0 to High(Components) do
  begin
    Actions := r_GetInterfaceActions(GameInterface, i);
    if (Length(Actions) > 0) then
      if (Lowercase(Actions[0]) = R_TAB_NAMES[TAB]) then
      begin
        Result := r_GetInterface(GameInterface, i);
        Exit;
      end;
  end;
  Result := -1;
end;

function r_GetCurrentTab: Integer;
var
  l, Texture: Integer;
  TabHandle: LongInt;
begin
  l := Length(R_TAB_NAMES);
  Dec(l);
  for Result := 0 to l do
  begin
    TabHandle := r_GetTabInterface(Result);
    if (TabHandle  <> -1) then
    begin
      Texture := r_GetInterfaceTextureEx(TabHandle, True);
      if (Texture > -1) then
        Exit;
    end;
  end;
  Result := -1;
end;

function r_GetTabBox(const Tab: Integer): TBox;
var
  GameInterface, i: Integer;
  Components: TIntegerArray;
  Actions: TStringArray;
begin
  GameInterface := 548;
  Components := r_GetInterfaceComponents(GameInterface);
  for i := 0 to High(Components) do
  begin
    Actions := r_GetInterfaceActions(GameInterface, i);
    if (Length(Actions) > 0) then
      if (Lowercase(Actions[0]) = R_TAB_NAMES[TAB]) then
      begin
        Result := r_GetInterfaceBox(Point(516, 168), GameInterface, i);
        Exit;
      end;
  end;
  Result := IntToBox(-1, -1, -1, -1);
end;

function r_OpenTab(const Tab: Integer): Boolean;
var
  Box: TBox;
begin
  Result := True;
  if (r_GetCurrentTab = Tab) then
    Exit;
  Box := r_GetTabBox(Tab);
  r_ClickMouseBox(Box.x1, Box.y1, Box.x2, Box.y2, True);
  Wait(RandomRange(400, 600));
  Result := r_GetCurrentTab = Tab;
end;

function r_Logout: Boolean;
begin
  Result := False;// TODO .
end;