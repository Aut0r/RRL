{=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=
RRL - Reflection Resource Library
Tab handling

---------------------------------------------------------

  * function r_IsRunning: Boolean;
      By: Timer
  * function r_GetRunEnergy: Integer;
      By: Timer
  * function r_GetPrayerPoints: Integer;
      By: Timer
  * function r_GetCurrentHealth: Integer;
      By: Timer
  * procedure r_SetRun(const Run: Boolean);
      By: Timer
  * function r_GetSkillLevel(const SkillIndex: Integer): Integer;
      By: Timer
  * function r_GetSkillExperience(const SkillIndex: Integer): Integer;
      By: Timer
=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=}

{
This work is licensed under the Creative Commons Attribution-NonCommercial-NoDerivs 3.0 Unported License.
To view a copy of this license, visit http://creativecommons.org/licenses/by-nc-nd/3.0/
or send a letter to Creative Commons, 171 Second Street, Suite 300, San Francisco, California, 94105, USA.

Copyright (C) 2010 - 2011 by Joe Haddad, all rights reserved.
This file is part of the RRL project (https://github.com/Timer/RRL).

For extended permissions please contact me by E-Mail, Timer150@Gmail.com.
}

function r_IsRunning: Boolean;
begin
  Result := r_GetSetting(173) = 1;
end;

function r_GetRunEnergy: Integer;
begin
  Result := StrToIntDef(r_GetInterfaceText(750, 5), -1);
end;

function r_GetPrayerPoints: Integer;
begin
  Result := StrToIntDef(r_GetInterfaceText(749, 4), -1);
end;

function r_GetCurrentHealth: Integer;
begin
  Result := StrToIntDef(r_GetInterfaceText(748, 8), -1);
end;

procedure r_SetRun(const Run: Boolean);
begin
  if (Run) xor (r_IsRunning) then
    Mouse(715, 95, 10, 10, True);
end;

function r_GetSkillLevel(const SkillIndex: Integer): Integer;
begin
  Result := SmartGetFieldArrayInt(0, r_Hooks[hook_SkillLevels], SkillIndex);
end;

function r_GetSkillExperience(const SkillIndex: Integer): Integer;
begin
  Result := SmartGetFieldArrayInt(0, r_Hooks[hook_SkillExperiences], SkillIndex);
end;