{=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=
RRL - Reflection Resource Library
Camera handling file

---------------------------------------------------------

 * function r_GetMinimapAngleDegrees: Extended;
     By: Timer
 * function r_GetMinimapAngleRadians: Extended;
     By: Timer
 * function r_MoveCompass(compassmove: Variant): Boolean;
     By: Timer
=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=}

{
This work is licensed under the Creative Commons Attribution-NonCommercial-NoDerivs 3.0 Unported License.
To view a copy of this license, visit http://creativecommons.org/licenses/by-nc-nd/3.0/
or send a letter to Creative Commons, 171 Second Street, Suite 300, San Francisco, California, 94105, USA.

Copyright (C) 2010 - 2011 by Joe Haddad, all rights reserved.
This file is part of the RRL project (https://github.com/Timer/RRL).

For extended permissions please contact me by E-Mail, Timer150@Gmail.com.
}

function r_GetMinimapAngleDegrees: Extended;
begin
  Result := SmartGetFieldFloat(0, hook_MapAngle) * 45.0 / 2048.0;
end;

function r_GetMinimapAngleRadians: Extended;
begin
  Result := SmartGetFieldFloat(0, hook_MapAngle) * pi / 8192.0;
end;

function r_MoveCompass(compassmove: Variant): Boolean;
var
  Angle, DesiredAngle: Extended;
  Left: Boolean;
  Mark: LongInt;
begin
  Result := False;
  try
    Angle := r_GetMinimapAngleDegrees;
    if (Angle < -1) or (not r_IsLoggedIn) then
      Exit;
    case varType(compassmove) of
      varString:
      begin
        case (LowerCase(compassmove)) of
          'n': DesiredAngle := 0;
          'w': DesiredAngle := 90;
          's': DesiredAngle := 180;
          'e': DesiredAngle := 270;
        end;
      end;
      varDouble, varSingle, varByte, varInt64, varInteger, varShortInt, varWord:
        DesiredAngle := compassmove;
    end;
    if ((MinE(Abs(Angle - DesiredAngle), MinE(Abs(Angle - (DesiredAngle + 360)), Abs((Angle + 360) - DesiredAngle)))) <= 5.0) then
    begin
      Result := True;
      Exit;
    end;
    Left := (Round((360 - Angle) + DesiredAngle) mod 360 > Round((Angle + 360) - DesiredAngle) mod 360);
    if (Left) then
      KeyDown(VK_LEFT)
    else
      KeyDown(VK_RIGHT);
    Mark := GetSystemTime;
    repeat
      Wait(RandomRange(15, 80));
      Angle := r_GetMinimapAngleDegrees;
    until ((MinE(Abs(Angle - DesiredAngle), MinE(Abs(Angle -
          (DesiredAngle + 360)), Abs((Angle + 360) - DesiredAngle)))) <= 5.0) or
          (Angle < 0) or (GetSystemTime - Mark > RandomRange(10000, 15000));
    if (Left) then
      KeyUp(VK_LEFT)
    else
      KeyUp(VK_RIGHT);
    Wait(RandomRange(150, 200));
  except
  end;
  try
    Result := ((MinE(Abs(Angle - DesiredAngle), MinE(Abs(Angle - (DesiredAngle + 360)), Abs((Angle + 360) - DesiredAngle)))) <= 5.0);
  except
    Result := False;
  end;
end;