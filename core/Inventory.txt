{=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=
RRL - Reflection Resource Library
Inventory routines

---------------------------------------------------------

 * function r_GetInventoryInterface: Integer;
     By: Timer
 * function r_GetInventoryItemAt(Slot: Integer): TRSItem;
     By: Timer
 * function r_GetInventoryItems: TRSItemArray;
     By: Timer
 * function r_GetInventoryCountEx(const Stacks: Boolean): Integer;
     By: Timer
 * function r_GetInventoryCount: Integer;
     By: Timer
 * function r_GetInventoryCountByIDExEx(const IDs: TIntegerArray; const Stacks: Boolean): Integer;
     By: Timer
 * function r_GetInventoryCountByIDEx(const IDs: TIntegerArray): Integer;
     By: Timer
 * function r_GetInventoryCountByID(const ID: Integer): Integer;
     By: Timer
 * function r_IsInventoryFull: Boolean;
     By: Timer
 * function r_IsInventoryEmpty: Boolean;
     By: Timer
 * function r_GetInventoryItemByIDEx(const IDs: TIntegerArray): TRSItem;
     By: Timer
 * function r_GetInventoryItemByID(const ID: Integer): TRSItem;
     By: Timer
 * function r_DoesInventoryItemIDExistEx(const IDs: TIntegerArray): Boolean;
     By: Timer
 * function r_DoesInventoryItemIDExist(const ID: Integer): Boolean;
     By: Timer
 * function r_DoesInventoryItemSlotExistEx(const Slots: TIntegerArray): Boolean;
     By: Timer
 * function r_DoesInventoryItemSlotExist(const Slot: Integer): Boolean;
     By: Timer
 * function r_DropAllItemsButByIDEx(const IDs: TIntegerArray): Boolean;
     By: Timer
 * function r_DropAllItemsButByID(const ID: Integer): Boolean;
     By: Timer
 * function r_DropAllItemsByIDEx(const IDs: TIntegerArray): Boolean;
     By: Timer
 * function r_DropAllItemsByID(const ID: Integer): Boolean;
     By: Timer
=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=}

{
This work is licensed under the Creative Commons Attribution-NonCommercial-NoDerivs 3.0 Unported License.
To view a copy of this license, visit http://creativecommons.org/licenses/by-nc-nd/3.0/
or send a letter to Creative Commons, 171 Second Street, Suite 300, San Francisco, California, 94105, USA.

Copyright (C) 2010 - 2011 by Joe Haddad, all rights reserved.
This file is part of the RRL project (https://github.com/Timer/RRL).

For extended permissions please contact me by E-Mail, Timer150@Gmail.com.
}

const
  R_INTERFACES_INVENTORY = 149;
  R_INTERFACES_BANK_INVENTORY = 763;

function NULL_RSITEM: TRSItem;
begin
  Result := RSItem(-1, -1, -1, '');
end;

function r_WaitForInteract(const Text: string; const TimeOut: Integer): Boolean; forward;

function r_GetInventoryInterface: Integer;
begin
  Result := -1;
  if (r_IsInterfaceValid(R_INTERFACES_BANK_INVENTORY)) then
    Result := R_INTERFACES_BANK_INVENTORY
  else if (r_IsInterfaceValid(R_INTERFACES_INVENTORY)) then
    Result := R_INTERFACES_INVENTORY;
end;

function r_GetInventoryItemAt(Slot: Integer): TRSItem;
var
  InventoryInterface, TheItem, JName: LongInt;
  InterfaceID, ID, TSlot, Stack: Integer;
  Name: string;
begin
  TSlot := Slot;
  Dec(Slot);
  Result := NULL_RSITEM;
  InterfaceID := r_GetInventoryInterface;
  if (InterfaceID > 0) then
    try
      InventoryInterface := r_GetInterface(InterfaceID, 0);
      TheItem := _InvokeObjectArray(InventoryInterface, r_Hooks[hook_Interface_Children], Slot);
      JName := _InvokeObject(TheItem, r_Hooks[hook_Interface_Name]);
      Name := r_RemoveJunk(r_GetString(JName));
      ID := _InvokeInteger(TheItem, r_Hooks[hook_InterfaceID]);
      Stack := _InvokeInteger(TheItem, r_Hooks[hook_Interface_StackSize]);
      if (ID > 0) then
        Result := RSItem(ID, TSlot, Stack, Name);
    finally
      try
        _FreeObject(InventoryInterface);
      except
      end;
      try
        _FreeObject(TheItem);
      except
      end;
      try
        _FreeObject(JName);
      except
      end;
    end;
end;

function r_GetInventoryItems: TRSItemArray;
var
  i, C: Integer;
begin
  SetLength(Result, 28);
  for i := 1 to 28 do
  begin
    Result[C] := r_GetInventoryItemAt(i);
    if (not (Result[C] = NULL_RSITEM)) then
      Inc(C);
  end;
  SetLength(Result, C);
end;

function r_GetInventoryCountEx(const Stacks: Boolean): Integer;
var
  Items: TRSItemArray;
  i: Integer;
begin
  Result := 0;
  Items := r_GetInventoryItems;
  if (Stacks) then
  begin
    for i := 0 to High(Items) do
      IncEx(Result, Items[i].Stack);
  end else
    Result := Length(Items);
end;

function r_GetInventoryCount: Integer;
begin
  Result := r_GetInventoryCountEx(False);
end;

function r_GetInventoryCountByIDExEx(const IDs: TIntegerArray; const Stacks: Boolean): Integer;
var
  i, ii: Integer;
  Item: TRSItem;
begin
  for i := 1 to 28 do
  begin
    Item := r_GetInventoryItemAt(i);
    for ii := 0 to High(IDs) do
      if (Item.ID = IDs[ii]) then
      begin
        if (Stacks) then
          IncEx(Result, Item.Stack)
        else
          Inc(Result);
        Break;
      end;
  end;
end;

function r_GetInventoryCountByIDEx(const IDs: TIntegerArray): Integer;
begin
  Result := r_GetInventoryCountByIDExEx(IDs, False);
end;

function r_GetInventoryCountByID(const ID: Integer): Integer;
begin
  Result := r_GetInventoryCountByIDEx([ID]);
end;

function r_IsInventoryFull: Boolean;
begin
  Result := r_GetInventoryCount >= 28;
end;

function r_IsInventoryEmpty: Boolean;
begin
  Result := r_GetInventoryCount <= 0;
end;

function r_GetInventoryItemByIDEx(const IDs: TIntegerArray): TRSItem;
var
  i, ii: Integer;
  it: TRSItem;
begin
  Result := NULL_RSITEM;
  for i := 1 to 28 do
  begin
    it := r_GetInventoryItemAt(i);
    for ii := 0 to High(IDs) do
      if (not (it = NULL_RSITEM)) and (it.ID = IDs[ii]) then
      begin
        Result := it;
        Exit;
      end;
  end;
end;

function r_GetInventoryItemByID(const ID: Integer): TRSItem;
begin
  Result := r_GetInventoryItemByIDEx([ID]);
end;

function r_DoesInventoryItemIDExistEx(const IDs: TIntegerArray): Boolean;
begin
  Result := (not (r_GetInventoryItemByIDEx(IDs) = NULL_RSITEM));
end;

function r_DoesInventoryItemIDExist(const ID: Integer): Boolean;
begin
  Result := r_DoesInventoryItemIDExistEx([ID]);
end;

function r_DoesInventoryItemSlotExistEx(const Slots: TIntegerArray): Boolean;
var
  i: Integer;
begin
  Result := False;
  for i := 0 to High(Slots) do
    if (not (r_GetInventoryItemAt(Slots[i]) = NULL_RSITEM)) then
    begin
      Result := True;
      Exit;
    end;
end;

function r_DoesInventoryItemSlotExist(const Slot: Integer): Boolean;
begin
  Result := r_DoesInventoryItemSlotExistEx([Slot]);
end;

function r_DropAllItemsButByIDEx(const IDs: TIntegerArray): Boolean;
var
  i, ii: Integer;
  m: LongInt;
  it: TRSItem;
  Drop: Boolean;
begin
  Result := False;
  for i := 1 to 28 do
  begin
    it := r_GetInventoryItemAt(i);
    Drop := False;
    for ii := 0 to High(IDs) do
      if (not (it = NULL_RSITEM)) and (it.ID = IDs[ii]) then
      begin
        Drop := True;
        Break;
      end;
    if (Drop) then
    begin
      MMouseItem(i);
      if (r_WaitForInteract('Drop', 1200)) then
      begin
        m := GetSystemTime;
        while (GetSystemTime - m < 2000) and (r_DoesInventoryItemSlotExist(i)) do
          Wait(RandomRange(150, 200));
        Wait(RandomRange(150, 200));
      end;
    end;
  end;
end;

function r_DropAllItemsButByID(const ID: Integer): Boolean;
begin
  Result := r_DropAllItemsButByIDEx([ID]);
end;

function r_DropAllItemsByIDEx(const IDs: TIntegerArray): Boolean;
var
  i, ii: Integer;
  m: LongInt;
  it: TRSItem;
begin
  Result := False;
  for i := 1 to 28 do
  begin
    it := r_GetInventoryItemAt(i);
    for ii := 0 to High(IDs) do
      if (not (it = NULL_RSITEM)) and (it.ID = IDs[ii]) then
      begin
        MMouseItem(i);
        if (r_WaitForInteract('Drop', 1200)) then
        begin
          m := GetSystemTime;
          while (GetSystemTime - m < 2000) and (r_DoesInventoryItemSlotExist(i)) do
            Wait(RandomRange(150, 200));
          Wait(RandomRange(150, 200));
        end;
        Break;
      end;
  end;
end;

function r_DropAllItemsByID(const ID: Integer): Boolean;
begin
  Result := r_DropAllItemsByIDEx([ID]);
end;