{=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=
RRL - Reflection Resource Library
Inventory routines

---------------------------------------------------------

 * function r_GetInventoryInterface: Integer;
     By: Timer
 * function r_GetInventoryItemAt(Slot: Integer): TRSItem;
     By: Timer
 * function r_GetInventoryItems: TRSItemArray;
     By: Timer
 * function r_GetInventoryCount: Integer;
     By: Timer
 * function r_GetInventoryCountByID(const ID: Integer): Integer;
     By: Timer
 * function r_IsInventoryFull: Boolean;
     By: Timer
 * function r_IsInventoryEmpty: Boolean;
     By: Timer
 * function r_GetInventoryItemByIDEx(IDs: TIntegerArray): TRSItem;
     By: Timer
 * function r_GetInventoryItemByID(ID: Integer): TRSItem;
     By: Timer
=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=}

{
This work is licensed under the Creative Commons Attribution-NonCommercial-NoDerivs 3.0 Unported License.
To view a copy of this license, visit http://creativecommons.org/licenses/by-nc-nd/3.0/
or send a letter to Creative Commons, 171 Second Street, Suite 300, San Francisco, California, 94105, USA.

Copyright (C) 2010 - 2011 by Joe Haddad, all rights reserved.
This file is part of the RRL project (https://github.com/Timer/RRL).

For extended permissions please contact me by E-Mail, Timer150@Gmail.com.
}

const
  R_INTERFACES_INVENTORY = 149;
  R_INTERFACES_BANK_INVENTORY = 763;

function NULL_RSITEM: TRSItem;
begin
  Result := RSItem(-1, -1, -1, '');
end;

function r_GetInventoryInterface: Integer;
begin
  Result := -1;
  if (r_IsInterfaceValid(R_INTERFACES_BANK_INVENTORY)) then
    Result := R_INTERFACES_BANK_INVENTORY
  else if (r_IsInterfaceValid(R_INTERFACES_INVENTORY)) then
    Result := R_INTERFACES_INVENTORY;
end;

function r_GetInventoryItemAt(Slot: Integer): TRSItem;
var
  InventoryInterface, TheItem, JName: LongInt;
  InterfaceID, ID, TSlot, Stack: Integer;
  Name: string;
begin
  TSlot := Slot;
  Dec(Slot);
  Result := NULL_RSITEM;
  InterfaceID := r_GetInventoryInterface;
  if (InterfaceID > 0) then
    try
      InventoryInterface := r_GetInterface(InterfaceID, 0);
      TheItem := SmartGetFieldArrayObject(InventoryInterface, hook_Interface_Children, Slot);
      JName := SmartGetFieldObject(TheItem, hook_Interface_Name);
      Name := r_RemoveJunk(r_GetString(JName));
      ID := SmartGetFieldInt(TheItem, hook_InterfaceID);
      Stack := SmartGetFieldInt(TheItem, hook_Interface_StackSize);
      if (ID > 0) then
        Result := RSItem(ID, TSlot, Stack, Name);
    finally
      try
        SmartFreeObject(InventoryInterface);
      except
      end;
      try
        SmartFreeObject(TheItem);
      except
      end;
      try
        SmartFreeObject(JName);
      except
      end;
    end;
end;

function r_GetInventoryItems: TRSItemArray;
var
  i, C: Integer;
begin
  SetLength(Result, 28);
  for i := 1 to 28 do
  begin
    Result[C] := r_GetInventoryItemAt(i);
    if (not (Result[C] = NULL_RSITEM)) then
      Inc(C);
  end;
  SetLength(Result, C);
end;

function r_GetInventoryCount: Integer;
begin
  Result := Length(r_GetInventoryItems);
end;

function r_GetInventoryCountByID(const ID: Integer): Integer;
var
  i: Integer;
  Item: TRSItem;
begin
  for i := 1 to 28 do
  begin
    Item := r_GetInventoryItemAt(i);
    if (Item.ID = ID) then
      Inc(Result);
  end;
end;

function r_IsInventoryFull: Boolean;
begin
  Result := r_GetInventoryCount >= 28;
end;

function r_IsInventoryEmpty: Boolean;
begin
  Result := r_GetInventoryCount <= 0;
end;

function r_GetInventoryItemByIDEx(IDs: TIntegerArray): TRSItem;
var
  i, ii: Integer;
  it: TRSItem;
begin
  Result := NULL_RSITEM;
  for i := 1 to 28 do
  begin
    it := r_GetInventoryItemAt(i);
    for ii := 0 to High(IDs) do
      if (not (it = NULL_RSITEM)) and (it.ID = IDs[ii]) then
      begin
        Result := it;
        Exit;
      end;
  end;
end;

function r_GetInventoryItemByID(ID: Integer): TRSItem;
begin
  Result := r_GetInventoryItemByIDEx([ID]);
end;