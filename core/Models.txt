{=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=
RRL - Reflection Resource Library
Model routines.

---------------------------------------------------------

 * function r_ConstructModel(i1, i2, i3, xp, yp, zp: TIntegerArray): TRSModelTriangleArray;
     By: Timer
=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=}

{
This work is licensed under the Creative Commons Attribution-NonCommercial-NoDerivs 3.0 Unported License.
To view a copy of this license, visit http://creativecommons.org/licenses/by-nc-nd/3.0/
or send a letter to Creative Commons, 171 Second Street, Suite 300, San Francisco, California, 94105, USA.

Copyright (C) 2010 - 2011 by Joe Haddad, all rights reserved.
This file is part of the RRL project (https://github.com/Timer/RRL).

For extended permissions please contact me by E-Mail, Timer150@Gmail.com.
}

function r_GetLocation: TRSTile; forward;
function r_MatrixDataToScreenEx(const mX, mY, mZ: Extended; const RD: TRenderData; const R: TRender): TPoint; forward;
function r_GetTileHeight(const t: TRSTile): Extended; forward;

function r_ConstructModel(i1, i2, i3, xp, yp, zp: TIntegerArray): TRSModelTriangleArray;
var
  RD: TRenderData;
  R: TRender;
  Loc: TRSTile;
  aPoint: array[0..2] of TPoint;
  l, i: Integer;
  Height: Extended;
begin
  Loc := r_GetLocation;
  Height := r_GetTileHeight(Loc);
  DecEx(Loc.x, SmartGetFieldInt(0, r_Hooks[hook_BaseX]));
  DecEx(Loc.y, SmartGetFieldInt(0, r_Hooks[hook_BaseY]));
  r_FetchRenderMatrix(RD, R);
  l := Length(i1);
  SetLength(Result, l);
  for i := 0 to l - 1 do
  begin
    aPoint[0] := r_MatrixDataToScreenEx(Loc.x + xp[i1[i]], Loc.y + zp[i1[i]],
                                        Height + yp[i1[i]], RD, R);
    aPoint[1] := r_MatrixDataToScreenEx(Loc.x + xp[i2[i]], Loc.y + zp[i2[i]],
                                        Height + yp[i2[i]], RD, R);
    aPoint[2] := r_MatrixDataToScreenEx(Loc.x + xp[i3[i]], Loc.y + zp[i3[i]],
                                        Height + yp[i3[i]], RD, R);
    Result[i] := RSModelTriangle(aPoint[0], aPoint[1], aPoint[2]);
  end;
end;