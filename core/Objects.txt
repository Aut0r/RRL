{=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=
RRL - Reflection Resource Library
Object routines.

---------------------------------------------------------

 * function r_GetObjectInteractableAt(const TT: TRSTile): TRSObject;
     By: Timer
 * function r_GetObjectWallObjectAt(const TT: TRSTile): TRSObject;
     By: Timer
 * function r_GetObjectWallDecorationAt(const TT: TRSTile): TRSObject;
     By: Timer
 * function r_GetObjectFloorDecorationAt(const TT: TRSTile): TRSObject;
     By: Timer
 * function r_GetObjectAt(const T: TRSTile; const ObjType: Integer): TRSObject;
     By: Timer
 * function r_GetAllObjectsByTypeEx(const ObjType, Range: Integer): TRSObjectArray;
     By: Timer
 * function r_GetAllObjectsByType(const ObjType: Integer): TRSObjectArray;
     By: Timer
 * function r_GetAllObjectsByIDsEx(const IDs: TIntegerArray; const ObjType, Range: Integer): TRSObjectArray;
     By: Timer
 * function r_GetAllObjectsByIDEx(const ID, ObjType, Range: Integer): TRSObjectArray;
     By: Timer
 * function r_GetAllObjectsByIDs(const IDs: TIntegerArray; const ObjType: Integer): TRSObjectArray;
     By: Timer
 * function r_GetAllObjectsByID(const ID, ObjType: Integer): TRSObjectArray;
     By: Timer
 * function r_SortObjectsEx(const Arr: TRSObjectArray; const From: TRSTile): TRSObjectArray;
     By: Timer
 * function r_SortObjects(const Arr: TRSObjectArray): TRSObjectArray;
     By: Timer
 * function r_GetClosestObjectByIDsEx(const IDs: TIntegerArray; const ObjType, Range: Integer): TRSObject;
     By: Timer
 * function r_GetClosestObjectByIDEx(const ID, ObjType, Range: Integer): TRSObject;
     By: Timer
 * function r_GetClosestObjectByIDs(const IDs: TIntegerArray; const ObjType: Integer): TRSObject;
     By: Timer
 * function r_GetClosestObjectByID(const ID, ObjType: Integer): TRSObject;
     By: Timer
=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=}

{
This work is licensed under the Creative Commons Attribution-NonCommercial-ShareAlike 3.0 Unported License.
To view a copy of this license, visit http://creativecommons.org/licenses/by-nc-sa/3.0/
or send a letter to Creative Commons, 171 Second Street, Suite 300, San Francisco, California, 94105, USA.

Copyright (C) 2010 - 2011 by Joe Haddad, all rights reserved.
This file is part of the RRL project (https://github.com/Timer/RRL).

For extended permissions please contact me by E-Mail, Timer150@Gmail.com.
}

const
  R_OBJECT_TYPE_INTERACTABLE = 1;
  R_OBJECT_TYPE_WALL_OBJECT = 2;
  R_OBJECT_TYPE_WALL_DECORATION = 3;
  R_OBJECT_TYPE_FLOOR_DECORATION = 4;

function NULL_RSOBJECT: TRSObject;
begin
  with Result do
  begin
    ID := -1;
    ObjectType := -1;
    Tile := NULL_RSTILE;
    MainTile := NULL_RSTILE;
    Area := IntToBox(-1, -1, -1, -1);
  end;
end;

function r_GetObjectInteractableAt(const TT: TRSTile): TRSObject;
var
  BaseX, BaseY, Plane, ObjID: Integer;
  T, ObjRTile: TRSTile;
  Ground, Node, Last, Obj, Obj2, Model: LongInt;
  ObjArea: TArea;
begin
  Result := NULL_RSOBJECT;
  try
    BaseX := SmartGetFieldInt(0, r_Hooks[hook_BaseX]);
    BaseY := SmartGetFieldInt(0, r_Hooks[hook_BaseY]);
    T := RSTile(TT.x - BaseX, TT.y - BaseY);
    Plane := SmartGetFieldInt(0, r_Hooks[hook_CurrentPlane]);
    Ground := SmartGetFieldArray3DObject(0, r_Hooks[hook_GroundTiles], Plane, T.x, T.y);
    Node := SmartGetFieldObject(Ground, r_Hooks[hook_Ground_AnimableList]);
    while (Node <> 0) do
    begin
      Obj := SmartGetFieldObject(Node, r_Hooks[hook_AnimableNode_Animable]);
      if (Obj <> 0) then
      begin
        ObjID := SmartGetFieldShort(Obj, r_Hooks[hook_InteractiveObject_ID]) and $FFFF;
        if (ObjID = -1) or (ObjID = 65535) then
        begin
          Obj2 := SmartGetFieldObject(Obj, r_Hooks[hook_InteractiveObjectSub_Composite]);
          if (Obj2 <> 0) then
          begin
            ObjID := SmartGetFieldInt(Obj2, r_Hooks[hook_ObjectComposite_ID]) and $FFFF;
            if (ObjID <> -1) and (ObjID <> 65535) then
            begin
              ObjArea.x1 := (BaseX + SmartGetFieldShort(Obj2, r_Hooks[hook_Animable_AreaX1]));
              ObjArea.y1 := (BaseY + SmartGetFieldShort(Obj2, r_Hooks[hook_Animable_AreaY1]));
              ObjArea.x2 := (BaseX + SmartGetFieldShort(Obj2, r_Hooks[hook_Animable_AreaX2]));
              ObjArea.y2 := (BaseY + SmartGetFieldShort(Obj2, r_Hooks[hook_Animable_AreaY2]));
              ObjRTile.x := Round(BaseX + (SmartGetFieldInt(Obj2, r_Hooks[hook_Animable_X]) div 512));
              ObjRTile.y := Round(BaseY + (SmartGetFieldInt(Obj2, r_Hooks[hook_Animable_Y]) div 512));
              Model := SmartGetFieldObject(Obj, r_Hooks[hook_ObjectComposite_Model]);
            end else
              Break;
          end;
          SmartFreeObject(Obj2);
        end else
        begin
          ObjArea.x1 := (BaseX + SmartGetFieldShort(Obj, r_Hooks[hook_Animable_AreaX1]));
          ObjArea.y1 := (BaseY + SmartGetFieldShort(Obj, r_Hooks[hook_Animable_AreaY1]));
          ObjArea.x2 := (BaseX + SmartGetFieldShort(Obj, r_Hooks[hook_Animable_AreaX2]));
          ObjArea.y2 := (BaseY + SmartGetFieldShort(Obj, r_Hooks[hook_Animable_AreaY2]));
          ObjRTile.x := Round(BaseX + (SmartGetFieldInt(Obj, r_Hooks[hook_Animable_X]) div 512));
          ObjRTile.y := Round(BaseY + (SmartGetFieldInt(Obj, r_Hooks[hook_Animable_Y]) div 512));
          Model := SmartGetFieldObject(Obj, r_Hooks[hook_InteractiveObject_Model]);
        end;
        Result := RSObject(ObjID, R_OBJECT_TYPE_INTERACTABLE, TT, ObjRTile, ObjArea, Model, 0);
        SmartFreeObject(Obj);
        Break;
      end;
      SmartFreeObject(Obj);
      Last := Node;
      Node := SmartGetFieldObject(Last, r_Hooks[hook_AnimableNode_Next]);
      SmartFreeObject(Last);
    end;
  finally
    try
      SmartFreeObject(Node);
    except
    end;
    try
      SmartFreeObject(Ground);
    except
    end;
    try
      SmartFreeObject(Obj);
    except
    end;
    try
      SmartFreeObject(Obj2);
    except
    end;
    try
      SmartFreeObject(Last);
    except
    end;
  end;
end;

function r_GetObjectWallObjectAt(const TT: TRSTile): TRSObject;
var
  BaseX, BaseY, Plane, ID: Integer;
  T, ObjRTile: TRSTile;
  Ground, WallObject, Model: LongInt;
  ObjArea: TArea;
begin
  Result := NULL_RSOBJECT;
  try
    BaseX := SmartGetFieldInt(0, r_Hooks[hook_BaseX]);
    BaseY := SmartGetFieldInt(0, r_Hooks[hook_BaseY]);
    T := RSTile(TT.x - BaseX, TT.y - BaseY);
    Plane := SmartGetFieldInt(0, r_Hooks[hook_CurrentPlane]);
    Ground := SmartGetFieldArray3DObject(0, r_Hooks[hook_GroundTiles], Plane, T.x, T.y);
    WallObject := SmartGetFieldObject(Ground, r_Hooks[hook_Ground_WallObject1]);
    if (WallObject = 0) then
    begin
      SmartFreeObject(WallObject);
      WallObject := SmartGetFieldObject(Ground, r_Hooks[hook_Ground_WallObject2]);
    end;
    if (WallObject > 0) then
    begin
      ID := SmartGetFieldShort(WallObject, r_Hooks[hook_WallObjectData_ID]) and $FFFF;
      if (ID = -1) or (ID = 65535) then
      begin
        SmartFreeObject(Ground);
        SmartFreeObject(WallObject);
        Exit;
      end;
      Model := SmartGetFieldObject(WallObject, r_Hooks[hook_WallObjectData_Model]);
      ObjArea.x1 := (BaseX + SmartGetFieldShort(WallObject, r_Hooks[hook_Animable_AreaX1]));
      ObjArea.y1 := (BaseY + SmartGetFieldShort(WallObject, r_Hooks[hook_Animable_AreaY1]));
      ObjArea.x2 := (BaseX + SmartGetFieldShort(WallObject, r_Hooks[hook_Animable_AreaX2]));
      ObjArea.y2 := (BaseY + SmartGetFieldShort(WallObject, r_Hooks[hook_Animable_AreaY2]));
      ObjRTile.x := Round(BaseX + (SmartGetFieldInt(WallObject, r_Hooks[hook_Animable_X]) div 512));
      ObjRTile.y := Round(BaseY + (SmartGetFieldInt(WallObject, r_Hooks[hook_Animable_Y]) div 512));
      Model := SmartGetFieldObject(WallObject, r_Hooks[hook_WallObjectData_Model]);
      Result := RSObject(ID, R_OBJECT_TYPE_WALL_OBJECT, TT, ObjRTile, ObjArea, Model, 0);
    end;
  finally
    try
      SmartFreeObject(Ground);
    except
    end;
    try
      if (WallObject > -1) then
        SmartFreeObject(WallObject);
    except
    end;
  end;
end;

function r_GetObjectWallDecorationAt(const TT: TRSTile): TRSObject;
var
  BaseX, BaseY, Plane, ID: Integer;
  T, ObjRTile: TRSTile;
  Ground, WallDecoration, Model: LongInt;
  ObjArea: TArea;
begin
  Result := NULL_RSOBJECT;
  try
    BaseX := SmartGetFieldInt(0, r_Hooks[hook_BaseX]);
    BaseY := SmartGetFieldInt(0, r_Hooks[hook_BaseY]);
    T := RSTile(TT.x - BaseX, TT.y - BaseY);
    Plane := SmartGetFieldInt(0, r_Hooks[hook_CurrentPlane]);
    Ground := SmartGetFieldArray3DObject(0, r_Hooks[hook_GroundTiles], Plane, T.x, T.y);
    WallDecoration := SmartGetFieldObject(Ground, r_Hooks[hook_Ground_WallDecoration1]);
    if (WallDecoration = 0) then
    begin
      SmartFreeObject(WallDecoration);
      WallDecoration := SmartGetFieldObject(Ground, r_Hooks[hook_Ground_WallDecoration2]);
    end;
    if (WallDecoration > 0) then
    begin
      ID := SmartGetFieldShort(WallDecoration, r_Hooks[hook_WallDecorationData_ID]) and $FFFF;
      if (ID = -1) or (ID = 65535) then
      begin
        SmartFreeObject(Ground);
        SmartFreeObject(WallDecoration);
        Exit;
      end;
      Model := SmartGetFieldObject(WallDecoration, r_Hooks[hook_WallDecorationData_Model]);
      ObjArea.x1 := (BaseX + SmartGetFieldShort(WallDecoration, r_Hooks[hook_Animable_AreaX1]));
      ObjArea.y1 := (BaseY + SmartGetFieldShort(WallDecoration, r_Hooks[hook_Animable_AreaY1]));
      ObjArea.x2 := (BaseX + SmartGetFieldShort(WallDecoration, r_Hooks[hook_Animable_AreaX2]));
      ObjArea.y2 := (BaseY + SmartGetFieldShort(WallDecoration, r_Hooks[hook_Animable_AreaY2]));
      ObjRTile.x := Round(BaseX + (SmartGetFieldInt(WallDecoration, r_Hooks[hook_Animable_X]) div 512));
      ObjRTile.y := Round(BaseY + (SmartGetFieldInt(WallDecoration, r_Hooks[hook_Animable_Y]) div 512));
      Model := SmartGetFieldObject(WallDecoration, r_Hooks[hook_WallDecorationData_Model]);
      Result := RSObject(ID, R_OBJECT_TYPE_WALL_DECORATION, TT, ObjRTile, ObjArea, Model, 0);
    end;
  finally
    try
      SmartFreeObject(Ground);
    except
    end;
    try
      if (WallDecoration > -1) then
        SmartFreeObject(WallDecoration);
    except
    end;
  end;
end;

function r_GetObjectFloorDecorationAt(const TT: TRSTile): TRSObject;
var
  BaseX, BaseY, Plane, ID: Integer;
  T, ObjRTile: TRSTile;
  Ground, FloorDecoration, Model: LongInt;
  ObjArea: TArea;
begin
  Result := NULL_RSOBJECT;
  try
    BaseX := SmartGetFieldInt(0, r_Hooks[hook_BaseX]);
    BaseY := SmartGetFieldInt(0, r_Hooks[hook_BaseY]);
    T := RSTile(TT.x - BaseX, TT.y - BaseY);
    Plane := SmartGetFieldInt(0, r_Hooks[hook_CurrentPlane]);
    Ground := SmartGetFieldArray3DObject(0, r_Hooks[hook_GroundTiles], Plane, T.x, T.y);
    FloorDecoration := SmartGetFieldObject(Ground, r_Hooks[hook_Ground_FloorDecoration]);
    if (FloorDecoration > 0) then
    begin
      ID := SmartGetFieldShort(FloorDecoration, r_Hooks[hook_FloorDecorationData_ID]) and $FFFF;
      if (ID = -1) or (ID = 65535) then
      begin
        SmartFreeObject(Ground);
        SmartFreeObject(FloorDecoration);
        Exit;
      end;
      Model := SmartGetFieldObject(FloorDecoration, r_Hooks[hook_FloorDecorationData_Model]);
      ObjArea.x1 := (BaseX + SmartGetFieldShort(FloorDecoration, r_Hooks[hook_Animable_AreaX1]));
      ObjArea.y1 := (BaseY + SmartGetFieldShort(FloorDecoration, r_Hooks[hook_Animable_AreaY1]));
      ObjArea.x2 := (BaseX + SmartGetFieldShort(FloorDecoration, r_Hooks[hook_Animable_AreaX2]));
      ObjArea.y2 := (BaseY + SmartGetFieldShort(FloorDecoration, r_Hooks[hook_Animable_AreaY2]));
      ObjRTile.x := Round(BaseX + (SmartGetFieldInt(FloorDecoration, r_Hooks[hook_Animable_X]) div 512));
      ObjRTile.y := Round(BaseY + (SmartGetFieldInt(FloorDecoration, r_Hooks[hook_Animable_Y]) div 512));
      Model := SmartGetFieldObject(FloorDecoration, r_Hooks[hook_FloorDecorationData_Model]);
      Result := RSObject(ID, R_OBJECT_TYPE_FLOOR_DECORATION, TT, ObjRTile, ObjArea, Model, 0);
    end;
  finally
    try
      SmartFreeObject(Ground);
    except
    end;
    try
      if (FloorDecoration > -1) then
        SmartFreeObject(FloorDecoration);
    except
    end;
  end;
end;

function r_GetObjectAt(const T: TRSTile; const ObjType: Integer): TRSObject;
begin
  Result := NULL_RSOBJECT;
  try
    case (ObjType) of
      R_OBJECT_TYPE_INTERACTABLE: Result := r_GetObjectInteractableAt(T);
      R_OBJECT_TYPE_WALL_OBJECT: Result := r_GetObjectWallObjectAt(T);
      R_OBJECT_TYPE_WALL_DECORATION: Result := r_GetObjectWallDecorationAt(T);
      R_OBJECT_TYPE_FLOOR_DECORATION: Result := r_GetObjectFloorDecorationAt(T);
    end;
  except
    Result := NULL_RSOBJECT;
  end;
end;

function r_GetAllObjectsByTypeEx(const ObjType, Range: Integer): TRSObjectArray;
var
  C, BaseX, BaseY, x, y, xMi, yMi, xMa, yMa: Integer;
  Obj: TRSObject;
  OurLoc: TRSTile;
begin
  try
    Result := [];
    BaseX := SmartGetFieldInt(0, r_Hooks[hook_BaseX]);
    BaseY := SmartGetFieldInt(0, r_Hooks[hook_BaseY]);
    OurLoc := r_GetLocation;
    xMi := Max(OurLoc.x - Range, BaseX);
    yMi := Max(OurLoc.y - Range, BaseY);
    xMa := Min(OurLoc.x + Range, BaseX + 104);
    yMa := Min(OurLoc.y + Range, BaseY + 104);
    SetArrayLength(Result, (yMa - yMi) * (xMa - xMi));
  except
    WriteLn('Hooks are incorrect or the game is loading... retrying!');
    Result := r_GetAllObjectsByTypeEx(ObjType, Range);
    Exit;
  end;
  for x := xMi to xMa do
    for y := yMi to yMa do
    begin
      Obj := r_GetObjectAt(RSTile(x, y), ObjType);
      if (not (Obj = NULL_RSOBJECT)) then
      begin
        Result[C] := Obj;
        Inc(C);
      end;
    end;
  SetArrayLength(Result, C);
end;

function r_GetAllObjectsByType(const ObjType: Integer): TRSObjectArray;
begin
  Result := r_GetAllObjectsByTypeEx(ObjType, 104);
end;

function r_GetAllObjectsByIDsEx(const IDs: TIntegerArray; const ObjType, Range: Integer): TRSObjectArray;
var
  C, BaseX, BaseY, x, y, xMi, yMi, xMa, yMa, i: Integer;
  Obj: TRSObject;
  OurLoc: TRSTile;
begin
  try
    Result := [];
    BaseX := SmartGetFieldInt(0, r_Hooks[hook_BaseX]);
    BaseY := SmartGetFieldInt(0, r_Hooks[hook_BaseY]);
    OurLoc := r_GetLocation;
    xMi := Max(OurLoc.x - Range, BaseX);
    yMi := Max(OurLoc.y - Range, BaseY);
    xMa := Min(OurLoc.x + Range, BaseX + 104);
    yMa := Min(OurLoc.y + Range, BaseY + 104);
    SetArrayLength(Result, (yMa - yMi) * (xMa - xMi));
  except
    WriteLn('Hooks are incorrect or the game is loading... retrying!');
    Result := r_GetAllObjectsByIDsEx(IDs, ObjType, Range);
    Exit;
  end;
  for x := xMi to xMa do
    for y := yMi to yMa do
    begin
      Obj := r_GetObjectAt(RSTile(x, y), ObjType);
      for i := 0 to High(IDs) do
        if (not (Obj = NULL_RSOBJECT)) and (Obj.ID = IDs[i]) then
        begin
          Result[C] := Obj;
          Inc(C);
          Break;
        end;
    end;
  SetArrayLength(Result, C);
end;

function r_GetAllObjectsByIDEx(const ID, ObjType, Range: Integer): TRSObjectArray;
begin
  Result := r_GetAllObjectsByIDsEx([ID], ObjType, Range);
end;

function r_GetAllObjectsByIDs(const IDs: TIntegerArray; const ObjType: Integer): TRSObjectArray;
begin
  Result := r_GetAllObjectsByIDsEx(IDs, ObjType, 104);
end;

function r_GetAllObjectsByID(const ID, ObjType: Integer): TRSObjectArray;
begin
  Result := r_GetAllObjectsByIDs([ID], ObjType);
end;

function r_SortObjectsEx(const Arr: TRSObjectArray; const From: TRSTile): TRSObjectArray;
var
  i, ii, L: LongInt;
  TPA: TPointArray;
begin
  L := GetArrayLength(Arr);
  if (L < 1) then
    Exit;
  SetArrayLength(Result, L);
  SetArrayLength(TPA, L);
  for i := 0 to L - 1 do
    TPA[i] := Point(Arr[i].Tile.x, Arr[i].Tile.y);
  SortTPAFrom(TPA, Point(From.x, From.y));
  for i := 0 to L - 1 do
    for ii := 0 to L - 1 do
      if (TPA[i].x = Arr[ii].Tile.x) and (TPA[i].y = Arr[ii].Tile.y) then
      begin
        Result[i] := Arr[ii];
        Break;
      end;
end;

function r_SortObjects(const Arr: TRSObjectArray): TRSObjectArray;
begin
  Result := r_SortObjectsEx(Arr, r_GetLocation);
end;

function r_GetClosestObjectByIDsEx(const IDs: TIntegerArray; const ObjType, Range: Integer): TRSObject;
var
  TArr, Arr: TRSObjectArray;
begin
  Result := NULL_RSOBJECT;
  Arr := r_GetAllObjectsByIDsEx(IDs, ObjType, Range);
  TArr := r_SortObjects(Arr);
  if (Length(TArr) > 0) then
    Result := Arr[0];
end;

function r_GetClosestObjectByIDEx(const ID, ObjType, Range: Integer): TRSObject;
begin
  Result := r_GetClosestObjectByIDsEx([ID], ObjType, Range);
end;

function r_GetClosestObjectByIDs(const IDs: TIntegerArray; const ObjType: Integer): TRSObject;
begin
  Result := r_GetClosestObjectByIDsEx(IDs, ObjType, 104);
end;

function r_GetClosestObjectByID(const ID, ObjType: Integer): TRSObject;
begin
  Result := r_GetClosestObjectByIDsEx([ID], ObjType, 104);
end;