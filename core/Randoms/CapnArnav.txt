{=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=
RRL - Reflection Resource Library
Captain Arnav random routines.

---------------------------------------------------------

 * function r_CapnArnav_InRandom: Boolean;
     By: Timer
 * function r_CapnArnav_Solved(const index: Integer): Boolean;
     By: Timer
 * function r_CapnArnav_Solve: Boolean;
     By: Timer
=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=}

{
This work is licensed under the Creative Commons Attribution-NonCommercial-ShareAlike 3.0 Unported License.
To view a copy of this license, visit http://creativecommons.org/licenses/by-nc-sa/3.0/
or send a letter to Creative Commons, 171 Second Street, Suite 300, San Francisco, California, 94105, USA.

Copyright (C) 2010 - 2011 by Joe Haddad, all rights reserved.
This file is part of the RRL project (https://github.com/Timer/RRL).

For extended permissions please contact me by E-Mail, Timer150@Gmail.com.
}

const
  R_ARNAV_CHEST_1 = 42337;
  R_ARNAV_CHEST_2 = 42338;
  R_ARNAV_NPC_ID = 2308;
  R_ARNAV_PORTAL = 11369;
  R_ARNAV_INTERFACE_TALK = 228;
  R_ARNAV_INTERFACE_PARENT = 185;
  R_ARNAV_INTERFACE_UNLOCK = 28;
  R_ARNAV_INTERFACE_CENTER = 23;

function r_CapnArnav_InRandom: Boolean;
begin
  Result := (not (r_GetClosestNPCByID(R_ARNAV_NPC_ID) = NULL_NPC));
  if (Result) then
  begin
    Wait(RandomRange(1700, 2500));
    Result := (not (r_GetClosestObjectByIDsEx([R_ARNAV_CHEST_1, R_ARNAV_CHEST_2], R_OBJECT_TYPE_INTERACTABLE, 6) = NULL_RSOBJECT));
  end;
end;

function r_CapnArnav_Solved(const index: Integer): Boolean;
var
  b, bP: TBox;
  p1, p2, p3: TPoint;
  R_ARNAV_SOLVE_IDS, R_ARNAV_ARROWS: T2DIntegerArray;
  ti1, ti2, ti3, ti4: TIntegerArray;
begin
  ti1 := [7, 14, 21];
  ti2 := [5, 12, 19];
  ti3 := [6, 13, 20];
  ti4 := [8, 15, 22];
  R_ARNAV_SOLVE_IDS := [ti1, ti2, ti3, ti4];
  ti1 := [2, 3];
  ti2 := [9, 10];
  ti3 := [16, 17];
  R_ARNAV_ARROWS := [ti1, ti2, ti3];
  Result := False;
  if (index = -1) then
    Exit;
  bP := r_GetInterfaceBox(R_ARNAV_INTERFACE_PARENT, R_ARNAV_INTERFACE_CENTER);
  b := r_GetInterfaceBox(R_ARNAV_INTERFACE_PARENT, R_ARNAV_SOLVE_IDS[index][0]);
  p1 := Point(Round((b.x1 + b.x2) / 2) + 15, Round((b.y1 + b.y2) / 2));
  b := r_GetInterfaceBox(R_ARNAV_INTERFACE_PARENT, R_ARNAV_SOLVE_IDS[index][1]);
  p2 := Point(Round((b.x1 + b.x2) / 2) + 15, Round((b.y1 + b.y2) / 2));
  b := r_GetInterfaceBox(R_ARNAV_INTERFACE_PARENT, R_ARNAV_SOLVE_IDS[index][2]);
  p3 := Point(Round((b.x1 + b.x2) / 2) + 15, Round((b.y1 + b.y2) / 2));
  Result := PointInBox(p1, bP) and PointInBox(p2, bP) and PointInBox(p3, bP);
end;

function r_CapnArnav_Solve: Boolean;
var
  Obj: TRSObject;
  R_ARNAV_SOLVE_IDS, R_ARNAV_ARROWS: T2DIntegerArray;
  p: TPoint;
  b, bb, bbb: TBox;
  t: string;
  i, ii, r: Integer;
  tt: LongInt;
  ti1, ti2, ti3, ti4: TIntegerArray;
begin
  ti1 := [7, 14, 21];
  ti2 := [5, 12, 19];
  ti3 := [6, 13, 20];
  ti4 := [8, 15, 22];
  R_ARNAV_SOLVE_IDS := [ti1, ti2, ti3, ti4];
  ti1 := [2, 3];
  ti2 := [9, 10];
  ti3 := [16, 17];
  R_ARNAV_ARROWS := [ti1, ti2, ti3];
  Result := not r_CapnArnav_InRandom;
  if (r_IsMoving) then
  begin
    Wait(RandomRange(2000, 3000));
    Exit;
  end;
  if (not Result) then
  begin
    if (not (r_GetClosestObjectByIDEx(R_ARNAV_CHEST_2, R_OBJECT_TYPE_INTERACTABLE, 9) = NULL_RSOBJECT)) then
    begin
      Obj := r_GetClosestObjectByIDEx(R_ARNAV_PORTAL, R_OBJECT_TYPE_INTERACTABLE, 9);
      WriteLn('[Arnav] Leave the game!');
      if (not r_IsTileOnScreen(Obj.Tile)) then
        r_SetCompass(r_GetAngleToTile(Obj.Tile));
      p := r_TileToScreen(Obj.Tile);
      r_MoveMouse(p.x, p.y, 5, 5);
      if (r_WaitForInteract('Enter', 500)) then
        Wait(RandomRange(4500, 5800));
      Exit;
    end else if (r_IsClickContinue or r_IsInterfaceValid(R_ARNAV_INTERFACE_TALK)) then
    begin
      WriteLn('[Arnav] Talking!');
      if (r_IsClickContinue) then
      begin
        r_ClickContinue;
        Wait(RandomRange(20, 300));
        Exit;
      end;
      b := r_GetInterfaceBox(R_ARNAV_INTERFACE_TALK, 3);
      r_ClickMouseBox(b.x1, b.y1 + 8, b.x2, b.y2, True);
      Wait(RandomRange(2000, 3000));
      Exit;
    end else if (not r_IsInterfaceValid(R_ARNAV_INTERFACE_PARENT)) then
    begin//Open Chest
      WriteLn('[Arnav] Open the chest!');
      Obj := r_GetClosestObjectByIDsEx([R_ARNAV_CHEST_1, R_ARNAV_CHEST_2], R_OBJECT_TYPE_INTERACTABLE, 9);
      if (not (Obj = NULL_RSOBJECT)) then
      begin
        if (not r_IsTileOnScreen(Obj.MainTile)) then
          r_SetCompass(r_GetAngleToTile(Obj.MainTile));
        p := r_TileToScreen(Obj.MainTile);
        r_MoveMouse(p.x, p.y, 5, 5);
        r_WaitForInteract('Open', 500);
        Exit;
      end;
    end else
    begin//Solve.
      WriteLn('[Arnav] Solve!');
      t := r_GetInterfaceText(R_ARNAV_INTERFACE_PARENT, 32);
      i := -1;
      if (Pos('Bowl', t) > 0) then
        i := 0
      else if (Pos('Ring', t) > 0) then
        i := 1
      else if (Pos('Coin', t) > 0) then
        i := 2
      else if (Pos('Bar', t) > 0) then
        i := 3;
      if (r_CapnArnav_Solved(i)) then
      begin
        WriteLn('[Arnav] We think we solved!');
        b := r_GetInterfaceBox(R_ARNAV_INTERFACE_PARENT, R_ARNAV_INTERFACE_UNLOCK);
        r_ClickMouseBox(b.x1, b.y1, b.x2, b.y2, True);
        Wait(RandomRange(2000, 3000));
        Exit;
      end;
      for ii := 0 to 2 do
      begin
        r := Random(2);
        bbb := r_GetInterfaceBox(R_ARNAV_INTERFACE_PARENT, R_ARNAV_INTERFACE_CENTER);
        b := r_GetInterfaceBox(R_ARNAV_INTERFACE_PARENT, R_ARNAV_SOLVE_IDS[i][ii]);
        bb := r_GetInterfaceBox(R_ARNAV_INTERFACE_PARENT, R_ARNAV_ARROWS[ii][r]);
        r_MarkTime(tt);
        while (r_GetTimeFromMark(tt) <= 10000) and (not PointInBox(Point(Round((b.x1 + b.x2) / 2) + 15, Round((b.y1 + b.y2) / 2)), bbb)) do
        begin
          r_ClickMouseBox(bb.x1, bb.y1, bb.x2, bb.y2, True);
          Wait(RandomRange(1000, 1400));
          b := r_GetInterfaceBox(R_ARNAV_INTERFACE_PARENT, R_ARNAV_SOLVE_IDS[i][ii]);
        end;
      end;
    end;
  end;
  Result := not r_CapnArnav_InRandom;
end;