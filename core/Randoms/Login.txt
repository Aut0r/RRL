{=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=
RRL - Reflection Resource Library
Login routines.

---------------------------------------------------------

 * function r_Login_IsSwitchingWorlds: Boolean;
     By: Timer
 * function r_Login_IsAtLoginScreen: Boolean;
     By: Timer
 * function r_Login_IsUsernameFilled: Boolean;
     By: Timer
 * function r_Login_IsPasswordFilled: Boolean;
     By: Timer
 * function r_Login_InRandom: Boolean;
     By: Timer
 * function r_Login_MinX(const p, c: Integer): Integer;
     By: Timer
 * function r_Login_AtLoginInterface(const p, c: Integer): Boolean;
     By: Timer
 * function r_Login_Solve: Boolean;
     By: Timer
=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=}

{
This work is licensed under the Creative Commons Attribution-NonCommercial-ShareAlike 3.0 Unported License.
To view a copy of this license, visit http://creativecommons.org/licenses/by-nc-sa/3.0/
or send a letter to Creative Commons, 171 Second Street, Suite 300, San Francisco, California, 94105, USA.

Copyright (C) 2010 - 2011 by Joe Haddad, all rights reserved.
This file is part of the RRL project (https://github.com/Timer/RRL).

For extended permissions please contact me by E-Mail, Timer150@Gmail.com.
}

const
  R_LOGIN_INTERFACE_MAIN = 905;
  R_LOGIN_INTERFACE_MAIN_CHILD = 59;
  R_LOGIN_INTERFACE_MAIN_CHILD_COMPONENT_ID = 4;
  R_LOGIN_INTERFACE_LOGIN_SCREEN = 596;
  R_LOGIN_INTERFACE_USERNAME = 65;
  R_LOGIN_INTERFACE_USERNAME_WINDOW = 37;
  R_LOGIN_INTERFACE_PASSWORD = 71;
  R_LOGIN_INTERFACE_PASSWORD_WINDOW = 39;
  R_LOGIN_INTERFACE_BUTTON_LOGIN = 42;
  R_LOGIN_INTERFACE_TEXT_RETURN = 11;
  R_LOGIN_INTERFACE_BUTTON_BACK = 55;
  R_LOGIN_INTERFACE_WELCOME_SCREEN = 906;
  R_LOGIN_INTERFACE_WELCOME_SCREEN_BUTTON_PLAY_1 = 160;
  R_LOGIN_INTERFACE_WELCOME_SCREEN_BUTTON_PLAY_2 = 171;
  R_LOGIN_INTERFACE_WELCOME_SCREEN_BUTTON_LOGOUT = 193;
  R_LOGIN_INTERFACE_WELCOME_SCREEN_TEXT_RETURN = 221;
  R_LOGIN_INTERFACE_WELCOME_SCREEN_BUTTON_BACK = 228;
  R_LOGIN_INTERFACE_WELCOME_SCREEN_HIGH_RISK_WORLD_TEXT = 86;
  R_LOGIN_INTERFACE_WELCOME_SCREEN_HIGH_RISK_WORLD_LOGIN_BUTTON = 93;
  R_LOGIN_INTERFACE_GRAPHICS_NOTICE = 976;
  R_LOGIN_INTERFACE_GRAPHICS_LEAVE_ALONE = 6;
  R_LOGIN_INDEX_LOGGED_OUT = 3;
  R_LOGIN_INDEX_LOBBY = 7;

function r_Login_IsSwitchingWorlds: Boolean;
begin
  Result := Pos('just left another world', Lowercase(r_GetInterfaceText(R_LOGIN_INTERFACE_WELCOME_SCREEN, R_LOGIN_INTERFACE_WELCOME_SCREEN_TEXT_RETURN))) > 0;
end;

function r_Login_IsAtLoginScreen: Boolean;
begin
  Result := r_IsInterfaceValid(596);
end;

function r_Login_IsUsernameFilled: Boolean;
var
  aN: string;
begin
  aN := Trim(Lowercase(r_Accounts[r_CurrentAccount].Name));
  Result := aN = Trim(Lowercase(r_GetInterfaceText(R_LOGIN_INTERFACE_LOGIN_SCREEN, R_LOGIN_INTERFACE_USERNAME)));
end;

function r_Login_IsPasswordFilled: Boolean;
var
  aNL: Integer;
begin
  aNL := Length(Trim(Lowercase(r_Accounts[r_CurrentAccount].Password)));
  Result := aNL = Length(Trim(Lowercase(r_GetInterfaceText(R_LOGIN_INTERFACE_LOGIN_SCREEN, R_LOGIN_INTERFACE_PASSWORD))));
end;

function r_Login_InRandom: Boolean;
var
  lI: Integer;
begin
  lI := r_GetLoginIndex;
  Result := ((lI = R_LOGIN_INDEX_LOGGED_OUT) or (lI = R_LOGIN_INDEX_LOBBY)) and (r_ArePlayersActive) and (not r_Login_IsSwitchingWorlds);
end;

function r_Login_MinX(const p, c: Integer): Integer;
var
  x, dx, midx, i: Integer;
  boundsarea: TBox;
  s: string;
begin
  Result := 0;
  boundsarea := r_GetInterfaceBox(p, c);
  if (boundsarea.x1 = -1) or (boundsarea.y1 = -1) then
    Exit;
  dx := Round((boundsarea.x2 - boundsarea.x1 - 3) / 2);
  midx := Round((boundsarea.x1 + (boundsarea.x2 - boundsarea.x1 + 1)) / 2);
  s := r_GetInterfaceText(R_LOGIN_INTERFACE_LOGIN_SCREEN, R_LOGIN_INTERFACE_PASSWORD);
  for i := 0 to Length(s) do
    x := x + 11;
  if (x > 44) then
    Result := boundsarea.x1 + x + 15
  else
    Result := midx + RandomRange(-dx, dx);
end;

function r_Login_AtLoginInterface(const p, c: Integer): Boolean;
var
  boundsarea: TBox;
  dy, maxRandomX, midx, midy: Integer;
begin
  Result := False;
  if (not r_IsInterfaceValid(p)) then
    Exit;
  boundsarea := r_GetInterfaceBox(p, c);
  if (boundsarea.x1 = -1) or (boundsarea.y1 = -1) then
    Exit;
  dy := Round((boundsarea.y2 - boundsarea.y1 - 3) / 2);
  midx := ((boundsarea.x1 + boundsarea.x2) shr 1);
  maxRandomX := boundsarea.x2 - midx;
  midy := (boundsarea.y1 + Round((boundsarea.y2 - boundsarea.y1 + 1) / 2));
  if (c = R_LOGIN_INTERFACE_PASSWORD_WINDOW) then
    r_ClickMouse(r_Login_MinX(p, c), midy + RandomRange(-dy, dy), 0, 0, True)
  else
    r_ClickMouse(midx + RandomRange(1, maxRandomX), midy + RandomRange(-dy, dy), 0, 0, True);
  Result := True;
end;

function r_Login_Solve: Boolean;
var
  username, returnText: string;
  textLength, i, inter: Integer;
  b1, b2, b, bb: TBox;
begin
  Result := False;
  username := Trim(Lowercase(r_Accounts[r_CurrentAccount].Name));
  returnText := Lowercase(r_GetInterfaceText(R_LOGIN_INTERFACE_LOGIN_SCREEN, R_LOGIN_INTERFACE_TEXT_RETURN));
  if (r_GetLoginIndex <> R_LOGIN_INDEX_LOGGED_OUT) then
  begin
    if (r_GetLoginIndex <> R_LOGIN_INDEX_LOBBY) then
      Wait(RandomRange(2000, 4000));
    if (r_GetLoginIndex = R_LOGIN_INDEX_LOBBY) then
    begin
      returnText := Lowercase(r_GetInterfaceText(R_LOGIN_INTERFACE_WELCOME_SCREEN, R_LOGIN_INTERFACE_WELCOME_SCREEN_TEXT_RETURN));
      b1 := r_GetInterfaceBox(R_LOGIN_INTERFACE_WELCOME_SCREEN, R_LOGIN_INTERFACE_WELCOME_SCREEN_BUTTON_PLAY_1);
      b2 := r_GetInterfaceBox(R_LOGIN_INTERFACE_WELCOME_SCREEN, R_LOGIN_INTERFACE_WELCOME_SCREEN_BUTTON_PLAY_2);
      r_ClickMouse(b1.x1, b1.y1, b2.x1 + b2.x2 - b2.x1 + 1 - b1.x1, b1.y2 - b1.y1 + 1, True);
      for i := 0 to 3 do
        if (r_GetLoginIndex = 6) then
          Wait(RandomRange(500, 700));
      returnText := Trim(Lowercase(r_GetInterfaceText(R_LOGIN_INTERFACE_WELCOME_SCREEN, R_LOGIN_INTERFACE_WELCOME_SCREEN_TEXT_RETURN)));
      b := r_GetInterfaceBox(R_LOGIN_INTERFACE_WELCOME_SCREEN, R_LOGIN_INTERFACE_WELCOME_SCREEN_BUTTON_BACK);
      if (Pos('total skill level of', returnText) > 0) then
      begin
        WriteLn('[Login] Not a high enough total level.');
        r_ClickMouseBox(b.x1, b.y1, b.x2, b.y2, True);
        Exit;
      end else if (Pos('login limit exceeded', returnText) > 0) then
      begin
        WriteLn('[Login] Login limit exceeded.');
        r_ClickMouseBox(b.x1, b.y1, b.x2, b.y2, True);
        bb := r_GetInterfaceBox(R_LOGIN_INTERFACE_WELCOME_SCREEN, R_LOGIN_INTERFACE_WELCOME_SCREEN_BUTTON_LOGOUT);
        r_ClickMouseBox(bb.x1, bb.y1, bb.x2, bb.y2, True);
        Exit;
      end else if (Pos('your account has not logged out', returnText) > 0) then
      begin
        WriteLn('[Login] Account is still logged on...');
        r_ClickMouseBox(b.x1, b.y1, b.x2, b.y2, True);
        bb := r_GetInterfaceBox(R_LOGIN_INTERFACE_WELCOME_SCREEN, R_LOGIN_INTERFACE_WELCOME_SCREEN_BUTTON_LOGOUT);
        r_ClickMouseBox(bb.x1, bb.y1, bb.x2, bb.y2, True);
        Exit;
      end else if (Pos('member', returnText) > 0) then
      begin
        WriteLn('[Login] You''re not a member.');
        b := r_GetInterfaceBox(R_LOGIN_INTERFACE_WELCOME_SCREEN, 228);
        bb := r_GetInterfaceBox(R_LOGIN_INTERFACE_WELCOME_SCREEN, 231);
        r_ClickMouse(b.x1, b.y1, bb.x1 + bb.x2 - bb.x1 + 1 - b.x1, b.y1 - b.y1 + 1, True);
        b := r_GetInterfaceBox(R_LOGIN_INTERFACE_WELCOME_SCREEN, 203);
        r_ClickMouseBox(b.x1, b.y1, b.x2, b.y2, True);
      end else if (Pos('high-risk wilderness world', returnText) > 0) then
      begin
        WriteLn('[Login] Wilderness world.');
        b := r_GetInterfaceBox(R_LOGIN_INTERFACE_WELCOME_SCREEN, R_LOGIN_INTERFACE_WELCOME_SCREEN_HIGH_RISK_WORLD_LOGIN_BUTTON);
        r_ClickMouseBox(b.x1, b.y1, b.x2, b.y2, True);
      end;
    end;
    Exit;
  end;
  if (not r_IsLoggedIn) then
  begin
    if (Pos('world', returnText) > 0) or (Pos('performing login', returnText) > 0) then
    begin
      Wait(RandomRange(1500, 2000));
      Exit;
    end;
  end;
  if (r_GetLoginIndex = R_LOGIN_INDEX_LOGGED_OUT) then
  begin
    inter := r_GetInterface(R_LOGIN_INTERFACE_GRAPHICS_NOTICE, R_LOGIN_INTERFACE_GRAPHICS_LEAVE_ALONE);
    if (not SmartGetFieldBoolean(inter, r_Hooks[hook_Interface_Hidden])) then
    begin
      b := r_GetInterfaceBox(R_LOGIN_INTERFACE_GRAPHICS_NOTICE, R_LOGIN_INTERFACE_GRAPHICS_LEAVE_ALONE);
      r_ClickMouseBox(b.x1, b.y1, b.x2, b.y2, True);
      Wait(500);
      Exit;
    end;
    SmartFreeObject(inter);
    if (not r_Login_IsAtLoginScreen) then
    begin
      b := r_GetSubInterfaceBox(R_LOGIN_INTERFACE_MAIN, R_LOGIN_INTERFACE_MAIN_CHILD, R_LOGIN_INTERFACE_MAIN_CHILD_COMPONENT_ID);
      r_MoveMouseBox(b.x1, b.y1, b.x2, b.y2);
      r_WaitForInteract('', 50);
      Wait(500);
      Exit;
    end;
    if (r_Login_IsUsernameFilled) and (r_Login_IsPasswordFilled) then
    begin
      if (Random(3) = 0) then
        SendKeys(#10)
      else
      begin
        b := r_GetInterfaceBox(R_LOGIN_INTERFACE_LOGIN_SCREEN, R_LOGIN_INTERFACE_BUTTON_LOGIN);
        r_ClickMouseBox(b.x1, b.y1, b.x2, b.y2, True);
      end;
      Wait(500);
      Exit;
    end;
    if (not r_Login_IsUsernameFilled) then
    begin
      if (r_Login_AtLoginInterface(R_LOGIN_INTERFACE_LOGIN_SCREEN, R_LOGIN_INTERFACE_USERNAME_WINDOW)) then
      begin
        textLength := Length(r_GetInterfaceText(R_LOGIN_INTERFACE_LOGIN_SCREEN, R_LOGIN_INTERFACE_USERNAME));
        if (textLength > 0) then
          for i := 0 to textLength + 2 + Random(5) do
          begin
            KeyDown(VK_BACK);
            Wait(Random(80));
            KeyUp(VK_BACK);
            Wait(Random(20));
          end;
        SendKeys(username);
        Wait(600);
        Exit;
      end;
      Wait(600);
      Exit;
    end;
    if (r_Login_IsUsernameFilled) and (not r_Login_IsPasswordFilled) then
    begin
      if (r_Login_AtLoginInterface(R_LOGIN_INTERFACE_LOGIN_SCREEN, R_LOGIN_INTERFACE_PASSWORD_WINDOW)) then
      begin
        textLength := Length(r_GetInterfaceText(R_LOGIN_INTERFACE_LOGIN_SCREEN, R_LOGIN_INTERFACE_PASSWORD));
        if (textLength > 0) then
          for i := 0 to textLength + 2 + Random(5) do
          begin
            KeyDown(VK_BACK);
            Wait(Random(80));
            KeyUp(VK_BACK);
            Wait(Random(20));
          end;
        SendKeys(r_Accounts[r_CurrentAccount].Password);
        Wait(600);
        Exit;
      end;
      Wait(600);
      Exit;
    end;
  end;
  Result := r_IsLoggedIn;
end;