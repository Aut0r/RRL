{=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=
RRL - Reflection Resource Library
Ground item routines.

---------------------------------------------------------

 * function r_GetGroundItemsAt(const Tile: TRSTile): TGroundItemArray;
     By: Timer
 * function r_GetAllGroundItemsOptimized(const Range: Integer): TGroundItemArray;
     By: Timer
 * function r_GetAllGroundItems: TGroundItemArray;
     By: Timer
 * function r_GetAllGroundItemsByIDOptimizedEx(const IDs: TIntegerArray; const Range: Integer): TGroundItemArray;
     By: Timer
 * function r_GetAllGroundItemsByIDOptimized(const ID: Integer; const Range: Integer): TGroundItemArray;
     By: Timer
 * function r_GetAllGroundItemsByIDEx(const IDs: TIntegerArray): TGroundItemArray;
     By: Timer
 * function r_GetAllGroundItemsByID(const ID: Integer): TGroundItemArray;
     By: Timer
 * function r_SortGroundItemsEx(const Arr: TGroundItemArray; const From: TRSTile): TGroundItemArray;
     By: Timer
 * function r_SortGroundItems(const Arr: TGroundItemArray): TGroundItemArray;
     By: Timer
 * function r_GetClosestGroundItemByIDOptimizedEx(const IDs: TIntegerArray; const Range: Integer): TGroundItem;
     By: Timer
 * function r_GetClosestGroundItemByIDOptimized(const ID, Range: Integer): TGroundItem;
     By: Timer
 * function r_GetClosestGroundItemByIDEx(const IDs: TIntegerArray): TGroundItem;
     By: Timer
 * function r_GetClosestGroundItemByID(const ID, Range: Integer): TGroundItem;
     By: Timer
=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=}

{
This work is licensed under the Creative Commons Attribution-NonCommercial-NoDerivs 3.0 Unported License.
To view a copy of this license, visit http://creativecommons.org/licenses/by-nc-nd/3.0/
or send a letter to Creative Commons, 171 Second Street, Suite 300, San Francisco, California, 94105, USA.

Copyright (C) 2010 - 2011 by Joe Haddad, all rights reserved.
This file is part of the RRL project (https://github.com/Timer/RRL).

For extended permissions please contact me by E-Mail, Timer150@Gmail.com.
}

function NULL_GROUNDITEM: TGroundItem;
begin
  with Result do
  begin
    Item := NULL_RSITEM;
    Tile := NULL_RSTILE;
  end;
end;

function r_GetGroundItemsAt(const Tile: TRSTile): TGroundItemArray;
var
  ItemCache, NodeCache, Dumb, Curr, List, Next: LongInt;
  Plane, gID, Len, Ind: Integer;
  Item: TRSItem;
begin
  SetLength(Result, 0);
  ItemCache := SmartGetFieldObject(0, hook_GroundItemCache);
  Plane := SmartGetFieldInt(0, hook_Current_Plane);
  gID := (Tile.x) or (Tile.y shl 14) or (Plane shl 28);
  NodeCache := SmartGetFieldObject(ItemCache, hook_Node_Cache);
  Len := SmartGetFieldArraySize(NodeCache, '', 1);
  SmartFreeObject(ItemCache);
  Ind := (gID) and (Len - 1);
  Dumb := SmartGetFieldArrayObject(NodeCache, '', Ind);
  SmartFreeObject(NodeCache);
  Curr := SmartGetFieldObject(Dumb, hook_Node_Next);
  while (not SmartIsEqual(Dumb, Curr)) do
  begin
    if (SmartGetFieldLongL(Curr, hook_NodeID) = gID) then
    begin
      List := SmartGetFieldObject(Curr, hook_Node_List);
      Break;
    end;
    Next := SmartGetFieldObject(Curr, hook_Node_Next);
    SmartFreeObject(Curr);
    Curr := Next;
  end;
  SmartFreeObject(Dumb);
  SmartFreeObject(Curr);
  if (List = 0) then
    Exit;
  Dumb := SmartGetFieldObject(List, hook_Node_Head);
  Curr := SmartGetFieldObject(Dumb, hook_Node_Next);
  while (not SmartIsEqual(Dumb, Curr)) do
  begin
    Len := Length(Result);
    SetLength(Result, Len + 1);
    Item.Stack := -1;
    Item.Name := '';//hook_ItemName?
    Item.ID := SmartGetFieldInt(Curr, hook_ItemID);
    Item.Stack := SmartGetFieldInt(Curr, hook_Item_Stack);
    Next := SmartGetFieldObject(Curr, hook_Node_Next);
    SmartFreeObject(Curr);
    Curr := Next;
    Result[Len] := GroundItem(Item, Tile);
  end;
  SmartFreeObject(List);
  SmartFreeObject(Dumb);
  SmartFreeObject(Curr);
end;

function r_GetAllGroundItemsOptimized(const Range: Integer): TGroundItemArray;
var
  BaseX, BaseY, mX, mY, xMi, yMi, xMa, yMa, C, x, y, i: Integer;
  OurLoc: TRSTile;
  Arr: TGroundItemArray;
begin
  SetLength(Result, 0);
  BaseX := SmartGetFieldInt(0, hook_BaseX);
  BaseY := SmartGetFieldInt(0, hook_BaseY);
  mX := BaseX + 104;
  mY := BaseY + 104;
  OurLoc := r_GetLocation;
  xMi := Max(BaseX, OurLoc.x - Range);
  yMi := Max(BaseY, OurLoc.y - Range);
  xMa := Min(mX, OurLoc.x + Range);
  yMa := Min(mY, OurLoc.y + Range);
  for x := xMi to xMa do
    for y := yMi to yMa do
    begin
      Arr := r_GetGroundItemsAt(RSTile(x, y));
      if (GetArrayLength(Arr) > 0) then
        for i := 0 to High(Arr) do
        begin
          Inc(C);
          SetLength(Result, C);
          Dec(C);
          Result[C] := Arr[i];
          Inc(C);
        end;
    end;
end;

function r_GetAllGroundItems: TGroundItemArray;
begin
  Result := r_GetAllGroundItemsOptimized(104);
end;

function r_GetAllGroundItemsByIDOptimizedEx(const IDs: TIntegerArray; const Range: Integer): TGroundItemArray;
var
  BaseX, BaseY, mX, mY, xMi, yMi, xMa, yMa, C, x, y, i, ii: Integer;
  OurLoc: TRSTile;
  Arr: TGroundItemArray;
begin
  SetLength(Result, 0);
  BaseX := SmartGetFieldInt(0, hook_BaseX);
  BaseY := SmartGetFieldInt(0, hook_BaseY);
  mX := BaseX + 104;
  mY := BaseY + 104;
  OurLoc := r_GetLocation;
  xMi := Max(BaseX, OurLoc.x - Range);
  yMi := Max(BaseY, OurLoc.y - Range);
  xMa := Min(mX, OurLoc.x + Range);
  yMa := Min(mY, OurLoc.y + Range);
  for x := xMi to xMa do
    for y := yMi to yMa do
    begin
      Arr := r_GetGroundItemsAt(RSTile(x, y));
      if (GetArrayLength(Arr) > 0) then
      begin
        for i := 0 to High(Arr) do
          for ii := 0 to High(IDs) do
            if (Arr[i].Item.ID = IDs[ii]) then
            begin
              Inc(C);
              SetLength(Result, C);
              Dec(C);
              Result[C] := Arr[i];
              Inc(C);
            end;
      end;
    end;
end;

function r_GetAllGroundItemsByIDOptimized(const ID: Integer; const Range: Integer): TGroundItemArray;
begin
  Result := r_GetAllGroundItemsByIDOptimizedEx([ID], Range);
end;

function r_GetAllGroundItemsByIDEx(const IDs: TIntegerArray): TGroundItemArray;
begin
  Result := r_GetAllGroundItemsByIDOptimizedEx(IDs, 104);
end;

function r_GetAllGroundItemsByID(const ID: Integer): TGroundItemArray;
begin
  Result := r_GetAllGroundItemsByIDEx([ID]);
end;

function r_SortGroundItemsEx(const Arr: TGroundItemArray; const From: TRSTile): TGroundItemArray;
var
  i, ii, L: LongInt;
  TPA: TPointArray;
begin
  L := Length(Arr);
  if (L < 1) then
    Exit;
  SetLength(Result, L);
  SetLength(TPA, L);
  for i := 0 to L - 1 do
    TPA[i] := Point(Arr[i].Tile.x, Arr[i].Tile.y);
  SortTPAFrom(TPA, Point(From.x, From.y));
  for i := 0 to L - 1 do
    for ii := 0 to L - 1 do
      if (TPA[i].x = Arr[ii].Tile.x) and (TPA[i].y = Arr[ii].Tile.y) then
      begin
        Result[i] := Arr[ii];
        Break;
      end;
end;

function r_SortGroundItems(const Arr: TGroundItemArray): TGroundItemArray;
begin
  Result := r_SortGroundItemsEx(Arr, r_GetLocation);
end;

function r_GetClosestGroundItemByIDOptimizedEx(const IDs: TIntegerArray; const Range: Integer): TGroundItem;
var
  Arr: TGroundItemArray;
begin
  Result := NULL_GROUNDITEM;
  Arr := r_GetAllGroundItemsByIDOptimizedEx(IDs, Range);
  Arr := r_SortGroundItems(Arr);
  if (GetArrayLength(Arr) > 0) then
    Result := Arr[0];
end;

function r_GetClosestGroundItemByIDOptimized(const ID, Range: Integer): TGroundItem;
begin
  Result := r_GetClosestGroundItemByIDOptimizedEx([ID], Range);
end;

function r_GetClosestGroundItemByIDEx(const IDs: TIntegerArray): TGroundItem;
var
  Arr: TGroundItemArray;
begin
  Result := NULL_GROUNDITEM;
  Arr := r_GetAllGroundItemsByIDEx(IDs);
  Arr := r_SortGroundItems(Arr);
  if (GetArrayLength(Arr) > 0) then
    Result := Arr[0];
end;

function r_GetClosestGroundItemByID(const ID, Range: Integer): TGroundItem;
begin
  Result := r_GetClosestGroundItemByIDEx([ID]);
end;