{=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=
RRL - Reflection Resource Library
Mouse routines.

---------------------------------------------------------

 * function aTan2(const y, x: Extended): Extended;
     By: Timer
 * function Factorial(const n: Integer): Integer;
     By: Timer
 * function BC(const c, cc: Integer): Extended;
     By: Timer
 * function FittsLaw(const TargetDist, TargetSize: Extended): LongInt;
     By: Timer
 * function CalculateGaussianCurve(const p: Extended): Extended;
     By: Timer
 * function GenerateGaussianTable(const a: Integer): TExtendedArray;
     By: Timer
 * function GenerateControlPoints(const sx, sy, ex, ey: Integer; ControlSpacing, ControlVariance: Integer): TPointArray;
     By: Timer
 * function GenerateSplineFromControls(const Controls: TPointArray): TPointArray;
     By: Timer
 * function ApplyBreadth(const Spline: TPointArray; const msTime, msSplit: Integer): TPointArray;
     By: Timer
 * procedure r_MoveMouse(const x, y: Integer; rx, ry: Integer);
     By: Timer
 * function _Mouse(Left: Boolean): [Integer/Boolean];
     By: Timer
 * procedure r_ClickMouse(const x, y, rx, ry: Integer; const Left: Boolean);
     By: Timer
 * procedure r_MoveMouseBox(const x1, y1, x2, y2: Integer);
     By: Timer
 * procedure r_ClickMouseBox(const x1, y1, x2, y2: Integer; const Left: Boolean);
     By: Timer
 * procedure r_SetMouseSpeed(const Speed: Integer);
     By: Timer
=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=}

{
This work is licensed under the Creative Commons Attribution-NonCommercial-ShareAlike 3.0 Unported License.
To view a copy of this license, visit http://creativecommons.org/licenses/by-nc-sa/3.0/
or send a letter to Creative Commons, 171 Second Street, Suite 300, San Francisco, California, 94105, USA.

Copyright (C) 2010 - 2011 by Joe Haddad, all rights reserved.
This file is part of the RRL project (https://github.com/Timer/RRL).

For extended permissions please contact me by E-Mail, Timer150@Gmail.com.
}

var
  r_MouseSpeed: Integer;

{
  - aTan2
    * Computes the angle in radians between the positive x-axis of a plane and
      the point given by the coordinates (x, y) on it.

    # x and y must both not be equal to zero.
}
function aTan2(const y, x: Extended): Extended;
var
  coeff_1, coeff_2, abs_y, Angle, r: Extended;
begin
  coeff_1 := Pi / 4.0;
  coeff_2 := 3.0 * coeff_1;
  abs_y := Abs(y);
  if (x >= 0.0) then
  begin
    r := (x - abs_y) / (x + abs_y);
    Angle := coeff_1 - coeff_1 * r;
  end else
  begin
    r := (x + abs_y) / (abs_y - x);
    Angle := coeff_2 - coeff_1 * r;
  end;
  if (y < 0.0) then
    Result := -angle
  else
    Result := angle;
end;

{
  - Factorial
    ** n!
    * returns the product of all positive integers less than or equal to n.
}
function Factorial(const n: Integer): Extended;
var
  i: Integer;
begin
  Result := 1.0;
  for i := 1 to n do
    Result := Result * i;
end;

{
  - BC
    ** Binomial coefficient
}
function BC(const c, cc: Integer): Extended;
begin
  Result := Factorial(c) / (Factorial(cc) * Factorial(c - cc));
end;

function FittsLaw(const TargetDist, TargetSize: Extended): LongInt;
begin
  {$IFDEF Simba}
    Result := Round(Random(100) + 105 * Logn(10, TargetDist / TargetSize + 1) / Logn(10, 2));
  {$ELSE}
    Result := Round(Random(100) + 105 * Log10(TargetDist / TargetSize + 1) / Log10(2));
  {$ENDIF}
end;

{
  - CalculateGaussianCurve
    ** Gaussian function
    * Computes the respective position of the curve for the given value.
}
function CalculateGaussianCurve(const p: Extended): Extended;
var
  r: Extended;
begin
  r := p * 10.0 - 5.0;
  Result := 1.0 / Exp(-r * r / 20.0) * Sqrt(5.0) * Sqrt(2.0 * Pi);
end;

{
  - GenerateGaussianTable
    ** Gaussian function output
    * Computes the respective positions for the number of steps given.

    # a is the number of steps.
}
function GenerateGaussianTable(const a: Integer): TExtendedArray;
var
  aI, Sum: Extended;
  i: Integer;
  sC: TExtendedArray;
begin
  aI := 1.0 / a;
  SetArrayLength(Result, a);
  SetArrayLength(sC, a);
  for i := 0 to a - 1 do
  begin
    sC[i] := CalculateGaussianCurve(aI * i);
    Sum := Sum + sC[i];
  end;
  for i := 0 to a - 1 do
    Result[i] := sC[i] / Sum;
end;

{
  - r_GenerateControlPoints
    * Computes the respective positions for the number of steps given.

    # sx, sy Start x, Start y
    # ex, ey End x, End y
    # ControlSpacing space between points
    # ControlVariance variance in the control points
}
function GenerateControlPoints(const sx, sy, ex, ey: Integer; ControlSpacing, ControlVariance: Integer): TPointArray;
var
  Dist, Angle, Radius, Percent: Extended;
  ControlPoints, i, CurrVariance: Integer;
  Curr: TPoint;
begin
  Dist := Sqrt((sx - ex) * (sx - ex) + (sy - ey) * (sy - ey));
  Angle := ATan2(ey - sy, ex - sx);
  ControlPoints := Floor(Dist / ControlSpacing);
  if ((ControlPoints * ControlSpacing) = Dist) then
    Dec(ControlPoints);
  if (ControlPoints <= 1) then
  begin
    ControlPoints := 2;
    ControlSpacing := Round(Dist / 3);
    ControlVariance := Round(Dist / 2);
  end;
  SetLength(Result, ControlPoints + 2);
  Result[0] := Point(sx, sy);
  for i := 1 to ControlPoints do
  begin
    Radius := ControlSpacing * i;
    Curr := Point(Round(sx + Radius * Cos(Angle)), Round(sy + Radius * Sin(Angle)));
    Percent := 1.0 - (i - 1) / ControlPoints;
    if (Percent > 0.5) then
      Percent := Percent - 0.5;
    Percent := Percent + 0.25;
    CurrVariance := Round(ControlVariance * Percent);
    Curr.x := Round(Curr.x + CurrVariance *(RandomRange(0, 100) / 100) * 2 - CurrVariance);
		Curr.y := Round(Curr.y + CurrVariance *(RandomRange(0, 100) / 100) * 2 - CurrVariance);
    Result[i] := Curr;
  end;
  Result[ControlPoints + 1] := Point(ex, ey);
end;

function GenerateSplineFromControls(const Controls: TPointArray): TPointArray;
var
  Degree, Index, C: Integer;
  Theta, x, y, PP: Extended;
  LastF: Boolean;
  Temp, Last: TPoint;
begin
  C := 0;
  Degree := GetArrayLength(Controls) - 1;
  SetLength(Result, 200);
  Theta := 0.00;
  while (Theta <= 1.0) do
  begin
    x := 0;
    y := 0;
    for Index := 0 to Degree do
    begin
      PP := BC(Degree, Index) * Pow(Theta, Index) * Pow(1.0 - Theta, Degree - Index);
      x := x + (PP * Controls[Index].x);
      y := y + (PP * Controls[Index].y);
    end;
    Temp := Point(Round(x), Round(y));
    if (not (Temp = Last)) then
    begin
      Last := Temp;
      Result[C] := Temp;
      Inc(C);
    end;
    Theta := Theta + 0.01;
  end;
  Result[C] := Point(Controls[Degree].x, Controls[Degree].y);
  Inc(C);
  SetLength(Result, C);
end;

function ApplyBreadth(const Spline: TPointArray; const msTime, msSplit: Integer): TPointArray;
var
  NumberPoints, Steps, i, NextIndex: Integer;
  MSPerPoint, UnDistStep, CurrentPercent: Extended;
  GaussTable: TExtendedArray;
begin
  NumberPoints := GetArrayLength(Spline);
  MSPerPoint := msTime / NumberPoints;
  UnDistStep := msSplit / MSPerPoint;
  Steps := Floor(NumberPoints / UnDistStep);
  SetLength(Result, Steps);
  GaussTable := GenerateGaussianTable(Steps);
  CurrentPercent := 0.0;
  for i := 0 to Steps - 1 do
  begin
    CurrentPercent := CurrentPercent + GaussTable[i];
    NextIndex := Floor(NumberPoints * CurrentPercent);
    if (NextIndex < NumberPoints) then
      Result[i] := Spline[NextIndex]
    else
      Result[i] := Spline[NumberPoints - 1];
  end;
  if (CurrentPercent < 1.0) then
    Result[Steps - 1] := Spline[NumberPoints - 1];
end;

procedure r_MoveMouse(const x, y: Integer; rx, ry: Integer);
var
  Speed, sx, sy: Integer;
  Time, i, h: LongInt;
  Controls, Spline, Path: TPointArray;
begin
  try
    rx := Max(1, rx);
    ry := Max(1, ry);
    Speed := Min(Max(1, r_MouseSpeed), 18);
    GetMousePos(sx, sy);
    Controls := GenerateControlPoints(sx, sy, x + RandomRange(-1 * rx, rx),
                                        y + RandomRange(-1 * ry, ry), 50, 120);
    Spline := GenerateSplineFromControls(Controls);
    Time := FittsLaw(Sqrt(Pow(x - sx, 2) + Pow(y - sy, 2)), 10.0);
    Path := ApplyBreadth(Spline, Time, Speed);
    h := GetArrayLength(Path) - 1;
    for i := 0 to h do
    begin
      MoveMouse(Path[i].x, Path[i].y);
      Wait(Max(0, Speed - 4 + Random(4)));
    end;
  except
  end;
end;

function _Mouse(Left: Boolean):{$IFDEF SIMBA} Integer;{$ELSE} Boolean;{$ENDIF}
begin
  {$IFDEF SIMBA}
    if (Left) then
      Result := mouse_Left
    else
      Result := mouse_Right;
  {$ELSE}
    Result := Left;
  {$ENDIF}
end;

procedure r_ClickMouse(const x, y, rx, ry: Integer; const Left: Boolean);
var
  cx, cy: Integer;
begin
  GetMousePos(cx, cy);
  if (cx <> x) or (cy <> y) then
  begin
    r_MoveMouse(x, y, rx, ry);
    Wait(60 + Random(30));
  end;
  GetMousePos(cx, cy);
  HoldMouse(cx, cy, _Mouse(Left));
  Wait(60 + Random(51));
  ReleaseMouse(cx, cy, _Mouse(Left));
  Wait(60 + Random(30));
end;

procedure r_MoveMouseBox(const x1, y1, x2, y2: Integer);
begin
  r_MoveMouse(RandomRange(x1, x2), RandomRange(y1, y2), 0, 0);
end;

procedure r_ClickMouseBox(const x1, y1, x2, y2: Integer; const Left: Boolean);
begin
  r_ClickMouse(RandomRange(x1, x2), RandomRange(y1, y2), 0, 0, Left);
end;

procedure r_SetMouseSpeed(const Speed: Integer);
begin
  r_MouseSpeed := Speed;
end;