{=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=
RRL - Reflection Resource Library
Global File
 * Hosts global constants and variables.

---------------------------------------------------------
 * procedure StripComments(var Content: string);
     By: Timer
 * function Get(const arr: array of TVariantArray; const idx: Integer): Variant;
     By: Timer
 * function LoadHooks: Boolean;
     By: Timer
 * function GetString(Bytes: LongInt): string;
     By: Timer
=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=}

{
This work is licensed under the Creative Commons Attribution-NonCommercial-NoDerivs 3.0 Unported License.
To view a copy of this license, visit http://creativecommons.org/licenses/by-nc-nd/3.0/
or send a letter to Creative Commons, 171 Second Street, Suite 300, San Francisco, California, 94105, USA.

Copyright (C) 2010 - 2011 by Joe Haddad, all rights reserved.
This file is part of the RRL project (https://github.com/Timer/RRL).

For extended permissions please contact me by E-Mail, Timer150@Gmail.com.
}

{
=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=
Current Client and Hooks version for
determining if the hooks are updated or not.
=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=
}
var
  ClientVersion, HooksVersion: Integer; // Current reversions, declared in SetupRRL; or manually.

{
=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=
Tile data types.
=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=
}
type
  TRSTile = record
    x, y: Integer;
  end;

  TRSTilePosition = record
    xOffset, yOffset: Extended;
  end;

  TRSTileArray = array of TRSTile;

function TILE_POSITION_TOP_LEFT: TRSTilePosition;
begin
  with Result do
  begin
    xOffset := 0.0;
    yOffset := 0.0;
  end;
end;

function TILE_POSITION_CENTER: TRSTilePosition;
begin
  with Result do
  begin
    xOffset := 0.5;
    yOffset := 0.5;
  end;
end;

function TILE_POSITION_BOTTOM_RIGHT: TRSTilePosition;
begin
  with Result do
  begin
    xOffset := 1.0;
    yOffset := 1.0;
  end;
end;

{
=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=
Client matrix types.
=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=
}
type
  TRenderData = record
    xOffset, yOffset, zOffset,
    xX, xY, xZ,
    yX, yY, yZ,
    zX, zY, zZ: Extended;
  end;

  TRender = record
    xScale, yScale,
    xMin, yMin, zMin,
    xMax, yMax, zMax: Extended;
  end;

function RSTile(const tx, ty: Integer): TRSTile;//TRSTile constructor
var
  T: TRSTile;
begin
  with T do
  begin
    x := tx;
    y := ty;
  end;
  Result := T;
end;

{
=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=
Path data types.
=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=
}
type
  TPath = record
    Tiles: TRSTileArray;
    Handlers: TIntegerArray;
  end;

  TPathArray = array of TPath;

const
  PATH_HANDLER_RUN = 1;
  PATH_HANDLER_WALKING = 2;

function Path(const WalkingTiles: TRSTileArray; const WalkingHandlers: TIntegerArray): TPath;
var
  NewPath: TPath;
begin
  with NewPath do
  begin
    Tiles := WalkingTiles;
    Handlers := WalkingHandlers;
  end;
  Result := NewPath;
end;

{
=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=
NPC types.
=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=
}
type
  TNPC = record
    Index, ID, Level, Animation, Orientation, HPRatio: Integer;
    Height: Extended;
    Interacting: LongInt;
    Name: string;
    Moving, Fighting: Boolean;
    Tile: TRSTile;
  end;

  TNPCArray = array of TNPC;

{
=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=
Hook variables.
=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=
}
var
  hook_MapAngle,

  hook_MyPlayer,

  hook_BaseX, hook_BaseY, hook_LocalX, hook_LocalY,

  hook_LoopCycle,

  hook_Character_Animation,
  hook_Character_Movement,
  hook_Character_LoopCycle,
  hook_Character_Height,
  hook_Character_Orientation,
  hook_Character_GetInteracting,
  hook_Character_HPRatio,

  hook_NPC_Level,
  hook_NPC_Count,
  hook_NPC_Index_Array,
  hook_NPC_Node_Array,
  hook_NPC_Definition,
  hook_NPC_ID,

  hook_NPC_Definition_Name,

  hook_Node_GetNPC,

  hook_Login_Index,

  hook_ToolKit, hook_ViewPort,

  hook_ViewPort_xOffset, hook_ViewPort_yOffset, hook_ViewPort_zOffset,
  hook_ViewPort_xX, hook_ViewPort_xY, hook_ViewPort_xZ,
  hook_ViewPort_yX, hook_ViewPort_yY, hook_ViewPort_yZ,
  hook_ViewPort_zX, hook_ViewPort_zY, hook_ViewPort_zZ,

  hook_ToolKit_xScale, hook_ToolKit_yScale,
  hook_ToolKit_xMin, hook_ToolKit_yMin, hook_ToolKit_zMin,
  hook_ToolKit_xMax, hook_ToolKit_yMax, hook_ToolKit_zMax,

  hook_Current_Plane, hook_GroundSettings_Array, hook_Plane_Array,
  hook_Tile_Heights: string;

{
=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=
Hook constant indexs
=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=
}
const
  index_Client_Version = 0;
  index_Hook_Version = 1;
  index_MapAngle = 2;
  index_MyPlayer = 3;
  index_BaseX = 4;
  index_BaseY = 5;
  index_LocalX = 6;
  index_LocalY = 7;
  index_Login_Index = 8;
  index_Character_Animation = 9;
  index_ViewPort_xOffset = 10;
  index_ViewPort_yOffset = 11;
  index_ViewPort_zOffset = 12;
  index_ViewPort_xX = 13;
  index_ViewPort_xY = 14;
  index_ViewPort_xZ = 15;
  index_ViewPort_yX = 16;
  index_ViewPort_yY = 17;
  index_ViewPort_yZ = 18;
  index_ViewPort_zX = 19;
  index_ViewPort_zY = 20;
  index_ViewPort_zZ = 21;
  index_ToolKit_xScale = 22;
  index_ToolKit_yScale = 23;
  index_ToolKit_xMin = 24;
  index_ToolKit_yMin = 25;
  index_ToolKit_zMin = 26;
  index_ToolKit_xMax = 27;
  index_ToolKit_yMax = 28;
  index_ToolKit_zMax = 29;
  index_Current_Plane = 30;
  index_GroundSettings_Array = 31;
  index_Plane_Array = 32;
  index_Tile_Heights = 33;
  index_ToolKit = 34;
  index_ViewPort = 35;
  index_LoopCycle = 36;
  index_Character_Movement = 37;
  index_Character_LoopCycle = 38;
  index_Character_Height = 39;
  index_Character_Orientation = 40;
  index_Character_GetInteracting = 41;
  index_Character_HPRatio = 42;
  index_NPC_Level = 43;
  index_NPC_Count = 44;
  index_NPC_Index_Array = 45;
  index_NPC_Node_Array = 46;
  index_NPC_Definition = 47;
  index_NPC_ID = 48;
  index_NPC_Definition_Name = 49;
  index_Node_GetNPC = 50;

procedure StripComments(var Content: string);
var
  StartPos, EndPos: Integer;
begin
  StartPos := Pos('/**', Content);
  EndPos := Pos('**/', Content);
  while (StartPos > 0) and (EndPos > 0) do
  begin
    Delete(Content, StartPos, EndPos - StartPos + 3);
    StartPos := Pos('/**', Content);
    EndPos := Pos('**/', Content);
  end;
  StartPos := Pos(#13, Content);
  while (StartPos > 0) do
  begin
    Delete(Content, StartPos, 1);
    StartPos := Pos(#13, Content);
  end;
  Trim(Content);
end;

function Get(const arr: array of TVariantArray; const idx: Integer): Variant;
var
  i: Integer;
begin
  for i := 0 to High(arr) do
    if (arr[i][0] = idx) then
    begin
      Result := arr[i][1];
      if (StrToIntDef(Result, -1) > -1) then
        Result := StrToIntDef(Result, -1);
      Exit;
    end;
end;

function LoadHooks: Boolean;
var
  HooksFile: string;
  DataArray: array of TVariantArray;
  LineArray: TStringArray;
  LineData: TStringArray;
  i, L: Integer;
  F: LongInt;
begin
  {$IFDEF SIMBA}
    F := OpenFile(IncludePath + 'RRL\Hooks.txt', False);
  {$ELSE}
    F := OpenFile(IncludesPath + 'RRL\Hooks.txt', False);
  {$ENDIF}
  ReadFileString(F, HooksFile, FileSize(f));
  CloseFile(F);
  StripComments(HooksFile);
  LineArray := Explode(#10, HooksFile);
  Writeln('Loading ' + IntToStr(Length(LineArray)) + ' lines.');
  for i := 0 to High(LineArray) do
  begin
    LineData := Explode(':', LineArray[i]);
    if (Length(LineData) = 2) then
    begin
      L := Length(DataArray);
      SetLength(DataArray, L + 1);
      SetLength(DataArray[L], 2);
      DataArray[L][0] := StrToIntDef(LineData[0], -1);
      DataArray[L][1] := LineData[1];
      if (StrToIntDef(DataArray[L][1], -1) > -1) then
        DataArray[L][1] := StrToIntDef(DataArray[l][1], -1);
    end;
  end;
  ClientVersion := Get(DataArray, index_Client_Version);
  HooksVersion := Get(DataArray, index_Hook_Version);
  hook_MapAngle := Get(DataArray, index_MapAngle);
  hook_MyPlayer := Get(DataArray, index_MyPlayer);
  hook_BaseX := Get(DataArray, index_BaseX);
  hook_BaseY := Get(DataArray, index_BaseY);
  hook_LocalX := Get(DataArray, index_LocalX);
  hook_LocalY := Get(DataArray, index_LocalY);
  hook_Login_Index := Get(DataArray, index_Login_Index);
  hook_Character_Animation := Get(DataArray, index_Character_Animation);
  hook_ViewPort_xOffset := Get(DataArray, index_ViewPort_xOffset);
  hook_ViewPort_yOffset := Get(DataArray, index_ViewPort_yOffset);
  hook_ViewPort_zOffset := Get(DataArray, index_ViewPort_zOffset);
  hook_ViewPort_xX := Get(DataArray, index_ViewPort_xX);
  hook_ViewPort_xY := Get(DataArray, index_ViewPort_xY);
  hook_ViewPort_xZ := Get(DataArray, index_ViewPort_xZ);
  hook_ViewPort_yX := Get(DataArray, index_ViewPort_yX);
  hook_ViewPort_yY := Get(DataArray, index_ViewPort_yY);
  hook_ViewPort_yZ := Get(DataArray, index_ViewPort_yZ);
  hook_ViewPort_zX := Get(DataArray, index_ViewPort_zX);
  hook_ViewPort_zY := Get(DataArray, index_ViewPort_zY);
  hook_ViewPort_zZ := Get(DataArray, index_ViewPort_zZ);
  hook_ToolKit_xScale := Get(DataArray, index_ToolKit_xScale);
  hook_ToolKit_yScale := Get(DataArray, index_ToolKit_yScale);
  hook_ToolKit_xMin := Get(DataArray, index_ToolKit_xMin);
  hook_ToolKit_yMin := Get(DataArray, index_ToolKit_yMin);
  hook_ToolKit_zMin := Get(DataArray, index_ToolKit_zMin);
  hook_ToolKit_xMax := Get(DataArray, index_ToolKit_xMax);
  hook_ToolKit_yMax := Get(DataArray, index_ToolKit_yMax);
  hook_ToolKit_zMax := Get(DataArray, index_ToolKit_zMax);
  hook_Current_Plane := Get(DataArray, index_Current_Plane);
  hook_GroundSettings_Array := Get(DataArray, index_GroundSettings_Array);
  hook_Plane_Array := Get(DataArray, index_Plane_Array);
  hook_Tile_Heights := Get(DataArray, index_Tile_Heights);
  hook_ToolKit := Get(DataArray, index_ToolKit);
  hook_ViewPort := Get(DataArray, index_ViewPort);
  hook_LoopCycle := Get(DataArray, index_LoopCycle);
  hook_Character_Movement := Get(DataArray, index_Character_Movement);
  hook_Character_LoopCycle := Get(DataArray, index_Character_Loopcycle);
  hook_Character_Height := Get(DataArray, index_Character_Height);
  hook_Character_Orientation := Get(DataArray, index_Character_Orientation);
  hook_Character_GetInteracting := Get(DataArray, index_Character_GetInteracting);
  hook_Character_HPRatio := Get(DataArray, index_Character_HPRatio);
  hook_NPC_Level := Get(DataArray, index_NPC_Level);
  hook_NPC_Count := Get(DataArray, index_NPC_Count);
  hook_NPC_Index_Array := Get(DataArray, index_NPC_Index_Array);
  hook_NPC_Node_Array := Get(DataArray, index_NPC_Node_Array);
  hook_NPC_Definition := Get(DataArray, index_NPC_Definition);
  hook_NPC_ID := Get(DataArray, index_NPC_ID);
  hook_NPC_Definition_Name := Get(DataArray, index_NPC_Definition_Name);
  hook_Node_GetNPC := Get(DataArray, index_Node_GetNPC);
  Result := True;
end;

function GetString(Bytes: LongInt): string;
begin
  //TODO .
end;