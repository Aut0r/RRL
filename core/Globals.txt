{=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=
RRL - Reflection Resource Library
Global File
 * Hosts global constants and variables.

---------------------------------------------------------
 * procedure StripComments(var Content: string);
     By: Timer
 * function r_Get(const arr: array of TVariantArray; const idx: Integer): Variant;
     By: Timer
 * function r_LoadHooks: Boolean;
     By: Timer
 * function r_GetString(Bytes: LongInt): [AnsiString/string];
     By: Timer
 * function r_RemoveJunk(S: string): string;
     By: Timer
=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=}

{
This work is licensed under the Creative Commons Attribution-NonCommercial-NoDerivs 3.0 Unported License.
To view a copy of this license, visit http://creativecommons.org/licenses/by-nc-nd/3.0/
or send a letter to Creative Commons, 171 Second Street, Suite 300, San Francisco, California, 94105, USA.

Copyright (C) 2010 - 2011 by Joe Haddad, all rights reserved.
This file is part of the RRL project (https://github.com/Timer/RRL).

For extended permissions please contact me by E-Mail, Timer150@Gmail.com.
}

{
=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=
Current Client and Hooks version for
determining if the hooks are updated or not.
=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=
}
{.include RRL\core\Hooks.info}
var
  ClientVersion, HooksVersion: Integer; // Current reversions, declared in SetupRRL; or manually.

{
=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=
Tile data types.
=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=
}
type
  TRSTile = record
    x, y: Integer;
  end;

  TRSTilePosition = record
    xOffset, yOffset: Extended;
  end;

  TRSTileArray = array of TRSTile;
  TArea = TBox;

function Area(const ax1, ay1, ax2, ay2: Integer): TArea;
begin
  with Result do
  begin
    x1 := ax1;
    y1 := ay1;
    x2 := ax2;
    y2 := ay2;
  end;
end;

function R_TILE_POSITION_TOP_LEFT: TRSTilePosition;
begin
  with Result do
  begin
    xOffset := 0.0;
    yOffset := 0.0;
  end;
end;

function R_TILE_POSITION_CENTER: TRSTilePosition;
begin
  with Result do
  begin
    xOffset := 0.5;
    yOffset := 0.5;
  end;
end;

function R_TILE_POSITION_BOTTOM_RIGHT: TRSTilePosition;
begin
  with Result do
  begin
    xOffset := 1.0;
    yOffset := 1.0;
  end;
end;

{
=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=
Client matrix types.
=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=
}
type
  TRenderData = record
    xOffset, yOffset, zOffset,
    xX, xY, xZ,
    yX, yY, yZ,
    zX, zY, zZ: Extended;
  end;

  TRender = record
    xScale, yScale,
    xMin, yMin, zMin,
    xMax, yMax, zMax: Extended;
  end;

function RSTile(const tx, ty: Integer): TRSTile;//TRSTile constructor
var
  T: TRSTile;
begin
  with T do
  begin
    x := tx;
    y := ty;
  end;
  Result := T;
end;

{
=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=
Path data types.
=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=
}
type
  TPath = record
    Tiles: TRSTileArray;
    Handlers: TIntegerArray;
  end;

  TPathArray = array of TPath;

const
  R_PATH_HANDLER_RUN = 1;
  R_PATH_HANDLER_WALKING = 2;

function Path(const WalkingTiles: TRSTileArray; const WalkingHandlers: TIntegerArray): TPath;
var
  NewPath: TPath;
begin
  with NewPath do
  begin
    Tiles := WalkingTiles;
    Handlers := WalkingHandlers;
  end;
  Result := NewPath;
end;

{
=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=
NPC types.
=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=
}
type
  TNPC = record
    Index, ID, Level, Animation, Orientation, HPRatio: Integer;
    Height: Extended;
    Interacting: LongInt;
    Name: string;
    Moving, Fighting: Boolean;
    Tile: TRSTile;
  end;

  TNPCArray = array of TNPC;

{
=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=
Object types.
=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=
}
type
  TRSObject = record
    ID, ObjectType: Integer;
    Tile, MainTile: TRSTile;
    Area: TArea;
  end;

  TRSObjectArray = array of TRSObject;

function RSObject(const ObjID, ObjType: Integer; const ObjTile, ObjMainTile: TRSTile; const ObjArea: TArea): TRSObject;
begin
  with Result do
  begin
    ID := ObjID;
    ObjectType := ObjType;
    Tile := ObjTile;
    MainTile := ObjMainTile;
    Area := ObjArea;
  end;
end;

{
=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=
Item types.
=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=
}
type
  TRSItem = record
    ID, Slot, Stack: Integer;
    Name: string;
  end;

  TRSItemArray = array of TRSItem;

function RSItem(const iID, iSlot, iStack: Integer; iName: string): TRSItem;
begin
  with Result do
  begin
    ID := iID;
    Slot := iSlot;
    Stack := iStack;
    Name := iName;
  end;
end;

{
=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=
Ground types.
=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=
}
type
  TGroundItem = record
    Item: TRSItem;
    Tile: TRSTile;
  end;

  TGroundItemArray = array of TGroundItem;

function GroundItem(const gItem: TRSItem; const gTile: TRSTile): TGroundItem;
begin
  with Result do
  begin
    Item := gItem;
    Tile := gTile;
  end;
end;

{
=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=
Randoms variables.
=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=
}
type
  TBoolFunc = function: Boolean;

  TRSRandom = record
    ID: Byte;
    InRandom, Solve: TBoolFunc;
    TimeOut: LongInt;
    Name: string;
    Active: Boolean;
  end;

var
  r_Randoms: array of TRSRandom;

{
=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=
Hook variables.
=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=
}
var
  r_Hooks: TStringArray;

procedure StripComments(var Content: string);
var
  StartPos, EndPos: Integer;
begin
  StartPos := Pos('/**', Content);
  EndPos := Pos('**/', Content);
  while (StartPos > 0) and (EndPos > 0) do
  begin
    Delete(Content, StartPos, EndPos - StartPos + 3);
    StartPos := Pos('/**', Content);
    EndPos := Pos('**/', Content);
  end;
  StartPos := Pos(#13, Content);
  while (StartPos > 0) do
  begin
    Delete(Content, StartPos, 1);
    StartPos := Pos(#13, Content);
  end;
  Trim(Content);
end;

function r_Get(const arr: array of TVariantArray; const idx: Integer): Variant;
var
  i: Integer;
begin
  for i := 0 to High(arr) do
    if (arr[i][0] = idx) then
    begin
      Result := arr[i][1];
      if (StrToIntDef(Result, -1) > -1) then
        Result := StrToIntDef(Result, -1);
      Exit;
    end;
end;

function r_LoadHooks: Boolean;
var
  HooksFile: string;
  DataArray: array of TVariantArray;
  LineArray: TStringArray;
  LineData: TStringArray;
  i, L, ML, ii: Integer;
  F: LongInt;
begin
  {$IFDEF SIMBA}
    F := OpenFile(IncludePath + 'RRL\Hooks.txt', False);
  {$ELSE}
    F := OpenFile(IncludesPath + 'RRL\Hooks.txt', False);
  {$ENDIF}
  ReadFileString(F, HooksFile, FileSize(f));
  CloseFile(F);
  StripComments(HooksFile);
  LineArray := Explode(#10, HooksFile);
  for i := 0 to High(LineArray) do
  begin
    LineData := Explode(':', LineArray[i]);
    if (Length(LineData) = 2) then
    begin
      L := Length(DataArray);
      SetLength(DataArray, L + 1);
      SetLength(DataArray[L], 2);
      DataArray[L][0] := StrToIntDef(LineData[0], -1);
      DataArray[L][1] := LineData[1];
      if (StrToIntDef(DataArray[L][1], -1) > -1) then
        DataArray[L][1] := StrToIntDef(DataArray[l][1], -1);
    end;
  end;
  SetLength(r_Hooks, 5000);
  for i := 0 to High(DataArray) do
  begin
    if (DataArray[i][0] > ML) then
      ML := DataArray[i][0];
    ii := DataArray[i][0];
    r_Hooks[ii] := DataArray[i][1];
  end;
  Inc(ML);
  SetLength(r_Hooks, ML);
  Result := True;
end;

{$IFDEF SIMBA}
function r_GetString(Bytes: LongInt): string;
{$ELSE}
function r_GetString(Bytes: LongInt): AnsiString;
{$ENDIF}
begin
  SetLength(Result, 255);
  SetLength(Result, SmartStringFromString(Bytes, Result));
end;

function r_RemoveJunk(S: string): string;
var
  P, P2, PLength: integer;
begin
  P := Pos('<', S);
  P2 := Pos('>', S);
  Result := S;
  PLength := P2 - P + 1;
  while (P <> 0) and (P2 <> 0) do
  begin
    Delete(Result, P, PLength);
    P := Pos('<', Result);
    P2 := Pos('>', Result);
    PLength := P2 - P + 1;
  end;
end;