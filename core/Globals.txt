{=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=
RRL - Reflection Resource Library
Global File
 * Hosts global constants and variables.

---------------------------------------------------------
 * procedure StripComments(var Content: string);
     By: Timer
 * function LoadHooks: Boolean;
     By: Timer
=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=}

{
This work is licensed under the Creative Commons Attribution-NonCommercial-NoDerivs 3.0 Unported License.
To view a copy of this license, visit http://creativecommons.org/licenses/by-nc-nd/3.0/
or send a letter to Creative Commons, 171 Second Street, Suite 300, San Francisco, California, 94105, USA.

Copyright (C) 2010 - 2011 by Joe Haddad, all rights reserved.
This file is part of the RRL project.

For extended permissions please contact me by E-Mail, Timer150@Gmail.com.
}

{
=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=
Current Client and Hooks version for
determining if the hooks are updated or not.
=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=
}
var
  ClientVersion, HooksVersion: Integer; // Current reversions, declared in SetupRRL; or manually.

{
=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=
Tile data types.
=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=
}
type
  TRSTile = record
    x, y: Integer;
  end;

  TRSTileArray = array of TRSTile;

function RSTile(const tx, ty: Integer): TRSTile;//TRSTile constructor
var
  t: TRSTile;
begin
  with t do
  begin
    x := tx;
    y := ty;
  end;
  Result := t;
end;

{
=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=
Hook variables.
=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=
}
var
  hook_MapAngle,
  hook_MyPlayer,
  hook_BaseX, hook_BaseY, hook_LocalX, hook_LocalY: string;

{
=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=
Hook constant indexs
=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=
}
const
  index_Client_Version = 0;
  index_Hook_Version = 1;
  index_MapAngle = 2;
  index_MyPlayer = 3;
  index_BaseX = 4;
  index_BaseY = 5;
  index_LocalX = 6;
  index_LocalY = 7;

procedure StripComments(var Content: string);
var
  StartPos, EndPos: Integer;
begin
  StartPos := Pos('/**', Content);
  EndPos := Pos('**/', Content);
  while (StartPos > 0) and (EndPos > 0) do
  begin
    Delete(Content, StartPos, EndPos - StartPos + 3);
    StartPos := Pos('/**', Content);
    EndPos := Pos('**/', Content);
  end;
  Trim(Content);
end;

function LoadHooks: Boolean;
var
  HooksFile: string;
  DataArray: array of TVariantArray;
  LineArray: TStringArray;
  LineData: TStringArray;
  i, l, t: Integer;
begin
  HooksFile := GetPage('https://github.com/Timer/RRL/raw/master/Hooks.txt');
  StripComments(HooksFile);
  LineArray := Explode(#10, HooksFile);
  Writeln(Length(LineArray));
  for i := 0 to High(LineArray) do
  begin
    LineData := Explode(':', LineArray[i]);
    if (Length(LineData) = 2) then
    begin
      l := Length(DataArray);
      SetLength(DataArray, l + 1);
      SetLength(DataArray[l], 2);
      DataArray[l][0] := StrToIntDef(LineData[0], -1);
      DataArray[l][1] := LineData[1];
      if (StrToIntDef(DataArray[l][1], -1) > -1) then
        DataArray[l][1] := StrToIntDef(DataArray[l][1], -1);
    end;
  end;
  WriteLn(Length(DataArray));
  Result := False;
end;
