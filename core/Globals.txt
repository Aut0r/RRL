{=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=
RRL - Reflection Resource Library
Global File
 * Hosts global constants and variables.

---------------------------------------------------------
 * procedure StripComments(var Content: string);
     By: Timer
 * function Get(const arr: array of TVariantArray; const idx: Integer): Variant;
     By: Timer
 * function LoadHooks: Boolean;
     By: Timer
=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=}

{
This work is licensed under the Creative Commons Attribution-NonCommercial-NoDerivs 3.0 Unported License.
To view a copy of this license, visit http://creativecommons.org/licenses/by-nc-nd/3.0/
or send a letter to Creative Commons, 171 Second Street, Suite 300, San Francisco, California, 94105, USA.

Copyright (C) 2010 - 2011 by Joe Haddad, all rights reserved.
This file is part of the RRL project (https://github.com/Timer/RRL).

For extended permissions please contact me by E-Mail, Timer150@Gmail.com.
}

{
=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=
Current Client and Hooks version for
determining if the hooks are updated or not.
=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=
}
var
  ClientVersion, HooksVersion: Integer; // Current reversions, declared in SetupRRL; or manually.

{
=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=
Tile data types.
=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=
}
type
  TRSTile = record
    x, y: Integer;
  end;

  TRSTileArray = array of TRSTile;

function RSTile(const tx, ty: Integer): TRSTile;//TRSTile constructor
var
  T: TRSTile;
begin
  with T do
  begin
    x := tx;
    y := ty;
  end;
  Result := T;
end;

{
=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=
Path data types.
=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=
}
type
  TPath = record
    Tiles: TRSTileArray;
    Handlers: TIntegerArray;
  end;

  TPathArray = array of TPath;

const
  PATH_HANDLER_RUN = 1;
  PATH_HANDLER_WALKING = 2;

function Path(const WalkingTiles: TRSTileArray; const WalkingHandlers: TIntegerArray): TPath;
var
  NewPath: TPath;
begin
  with NewPath do
  begin
    Tiles := WalkingTiles;
    Handlers := WalkingHandlers;
  end;
  Result := NewPath;
end;

{
=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=
Hook variables.
=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=
}
var
  hook_MapAngle,
  hook_MyPlayer,
  hook_BaseX, hook_BaseY, hook_LocalX, hook_LocalY,
  hook_Login_Index: string;

{
=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=
Hook constant indexs
=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=
}
const
  index_Client_Version = 0;
  index_Hook_Version = 1;
  index_MapAngle = 2;
  index_MyPlayer = 3;
  index_BaseX = 4;
  index_BaseY = 5;
  index_LocalX = 6;
  index_LocalY = 7;
  index_Login_Index = 8;

procedure StripComments(var Content: string);
var
  StartPos, EndPos: Integer;
begin
  StartPos := Pos('/**', Content);
  EndPos := Pos('**/', Content);
  while (StartPos > 0) and (EndPos > 0) do
  begin
    Delete(Content, StartPos, EndPos - StartPos + 3);
    StartPos := Pos('/**', Content);
    EndPos := Pos('**/', Content);
  end;
  StartPos := Pos(#13, Content);
  while (StartPos > 0) do
  begin
    Delete(Content, StartPos, 1);
    StartPos := Pos(#13, Content);
  end;
  Trim(Content);
end;

function Get(const arr: array of TVariantArray; const idx: Integer): Variant;
var
  i: Integer;
begin
  for i := 0 to High(arr) do
    if (arr[i][0] = idx) then
    begin
      Result := arr[i][1];
      if (StrToIntDef(Result, -1) > -1) then
        Result := StrToIntDef(Result, -1);
      Exit;
    end;
end;

function LoadHooks: Boolean;
var
  HooksFile: string;
  DataArray: array of TVariantArray;
  LineArray: TStringArray;
  LineData: TStringArray;
  i, L: Integer;
  F: LongInt;
begin
  {$IFDEF SIMBA}
    F := OpenFile(IncludePath + 'RRL\Hooks.txt', False);
  {$ELSE}
    F := OpenFile(IncludesPath + 'RRL\Hooks.txt', False);
  {$ENDIF}
  ReadFileString(F, HooksFile, FileSize(f));
  CloseFile(F);
  StripComments(HooksFile);
  LineArray := Explode(#10, HooksFile);
  for i := 0 to High(LineArray) do
  begin
    LineData := Explode(':', LineArray[i]);
    if (Length(LineData) = 2) then
    begin
      L := Length(DataArray);
      SetLength(DataArray, L + 1);
      SetLength(DataArray[L], 2);
      DataArray[L][0] := StrToIntDef(LineData[0], -1);
      DataArray[L][1] := LineData[1];
      if (StrToIntDef(DataArray[L][1], -1) > -1) then
        DataArray[L][1] := StrToIntDef(DataArray[l][1], -1);
    end;
  end;
  ClientVersion := Get(DataArray, index_Client_Version);
  HooksVersion := Get(DataArray, index_Hook_Version);
  hook_MapAngle := Get(DataArray, index_MapAngle);
  hook_MyPlayer := Get(DataArray, index_MyPlayer);
  hook_BaseX := Get(DataArray, index_BaseX);
  hook_BaseY := Get(DataArray, index_BaseY);
  hook_LocalX := Get(DataArray, index_LocalX);
  hook_LocalY := Get(DataArray, index_LocalY);
  hook_Login_Index := Get(DataArray, index_Login_Index);
  Result := True;
end;