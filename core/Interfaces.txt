{=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=
RRL - Reflection Resource Library
Menu routines.

---------------------------------------------------------

 * function InterfaceValid(const id: Integer): Boolean;
     By: Timer
 * function InterfaceGet(const ParentID, ChildID: Integer): LongInt;
     By: Timer
 * function InterfaceGetTextEx(const PathToInterface: LongInt; Free: Boolean): string;
     By: Timer
 * function InterfaceGetText(const ParentID, ChildID: Integer): string;
     By: Timer
=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=}

{
This work is licensed under the Creative Commons Attribution-NonCommercial-NoDerivs 3.0 Unported License.
To view a copy of this license, visit http://creativecommons.org/licenses/by-nc-nd/3.0/
or send a letter to Creative Commons, 171 Second Street, Suite 300, San Francisco, California, 94105, USA.

Copyright (C) 2010 - 2011 by Joe Haddad, all rights reserved.
This file is part of the RRL project (https://github.com/Timer/RRL).

For extended permissions please contact me by E-Mail, Timer150@Gmail.com.
}

function InterfaceValid(const id: Integer): Boolean;
begin
  Result := SmartGetFieldArrayBoolean(0, hook_Valid_Interfaces, id);
end;

function InterfaceGet(const ParentID, ChildID: Integer): LongInt;
begin
  Result := SmartGetFieldArray2DObject(0, hook_Interfaces, ParentID, ChildID);
end;

function InterfaceGetTextEx(const PathToInterface: LongInt; Free: Boolean): string;
var
  Text: LongInt;
begin
  Text := SmartGetFieldObject(PathToInterface, hook_Interface_Text);
  Result := GetString(Text);
  SmartFreeObject(Text);
  if (Free) then
    SmartFreeObject(PathToInterface);
end;

function InterfaceGetText(const ParentID, ChildID: Integer): string;
var
  PathToInterface: LongInt;
begin
  PathToInterface := InterfaceGet(ParentID, ChildID);
  Result := InterfaceGetTextEx(PathToInterface, True);
end;