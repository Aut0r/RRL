{=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=
RRL - Reflection Resource Library
Menu routines.

---------------------------------------------------------

 * function r_IsInterfaceValid(const id: Integer): Boolean;
     By: Timer
 * function r_GetInterface(const ParentID, ChildID: Integer): LongInt;
     By: Timer
 * function r_GetSubInterface(const ParentID, ChildID, ComponentID: Integer): LongInt;
     By: Timer
 * function r_GetInterfaceComponentCount(const ParentID: Integer): Integer;
     By: Timer
 * function r_GetSubInterfaceComponentCount(const ParentID, ChildID: Integer): Integer;
     By: Timer
 * function r_GetInterfaceTextEx(const PathToInterface: LongInt; Free: Boolean): string;
     By: Timer
 * function r_GetInterfaceText(const ParentID, ChildID: Integer): string;
     By: Timer
 * function r_GetInterfaceBox(const ParentID, ChildID: Integer): TBox;
     By: Timer
 * function r_GetSubInterfaceBox(const ParentID, ChildID, ComponentID: Integer): TBox;
     By: Timer
 * function r_GetInterfaceActionsEx(const PathToInterface: LongInt; Free: Boolean): TStringArray;
     By: Timer
 * function r_GetInterfaceActions(const ParentID, ChildID: Integer): TStringArray;
     By: Timer
 * function r_GetInterfaceTextureEx(const PathToInterface: LongInt; Free: Boolean): Integer;
     By: Timer
 * function r_GetInterfaceTexture(const ParentID, ChildID: Integer): Integer;
     By: Timer
 * function r_IsClickContinue: Boolean;
     By: Timer
 * function r_ClickContinue: Boolean;
     By: Timer
=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=}

{
This work is licensed under the Creative Commons Attribution-NonCommercial-ShareAlike 3.0 Unported License.
To view a copy of this license, visit http://creativecommons.org/licenses/by-nc-sa/3.0/
or send a letter to Creative Commons, 171 Second Street, Suite 300, San Francisco, California, 94105, USA.

Copyright (C) 2010 - 2011 by Joe Haddad, all rights reserved.
This file is part of the RRL project (https://github.com/Timer/RRL).

For extended permissions please contact me by E-Mail, Timer150@Gmail.com.
}

function r_IsInterfaceValid(const id: Integer): Boolean;
begin
  Result := SmartGetFieldArrayBoolean(0, r_Hooks[hook_ValidInterfaces], id);
end;

function r_GetInterface(const ParentID, ChildID: Integer): LongInt;
begin
  Result := SmartGetFieldArray2DObject(0, r_Hooks[hook_Interfaces], ParentID, ChildID);
end;

function r_GetSubInterface(const ParentID, ChildID, ComponentID: Integer): LongInt;
var
  F: LongInt;
begin
  try
    F := r_GetInterface(ParentID, ChildID);
    Result := SmartGetFieldArrayObject(F, r_Hooks[hook_Interface_Components], ComponentID);
    SmartFreeObject(F);
  except
    Result := 0;
  end;
end;

function r_GetInterfaceComponentCount(const ParentID: Integer): Integer;
var
  F: LongInt;
begin
  try
    Result := 0;
    F := r_GetInterface(ParentID, Result);
    while (not SmartIsNull(F)) do
    begin
      Inc(Result);
      SmartFreeObject(F);
      F := r_GetInterface(ParentID, Result);
    end;
    SmartFreeObject(F);
  except
    try
      SmartFreeObject(F);
    except
    end;
  end;
end;

function r_GetSubInterfaceComponentCount(const ParentID, ChildID: Integer): Integer;
var
  F, FF: LongInt;
  AC: Integer;
begin
  try
    Result := 0;
    F := r_GetInterface(ParentID, ChildID);
    if (SmartIsNull(F)) then
    begin
      SmartFreeObject(F);
      Exit;
    end;
    AC := SmartGetFieldArraySize(F, r_Hooks[hook_Interface_Components], 1);
    FF := SmartGetFieldArrayObject(F, r_Hooks[hook_Interface_Components], Result);
    while (not SmartIsNull(FF)) do
    begin
      Inc(Result);
      SmartFreeObject(FF);
      FF := SmartGetFieldArrayObject(F, r_Hooks[hook_Interface_Components], Result);
    end;
    SmartFreeObject(FF);
    SmartFreeObject(F);
  except
    try
      SmartFreeObject(FF);
    except
    end;
    try
      SmartFreeObject(F);
    except
    end;
  end;
end;

function r_GetInterfaceTextEx(const PathToInterface: LongInt; Free: Boolean): string;
var
  Text: LongInt;
begin
  Text := SmartGetFieldObject(PathToInterface, r_Hooks[hook_Interface_Text]);
  Result := r_GetString(Text);
  SmartFreeObject(Text);
  if (Free) then
    SmartFreeObject(PathToInterface);
end;

function r_GetInterfaceText(const ParentID, ChildID: Integer): string;
var
  PathToInterface: LongInt;
begin
  PathToInterface := r_GetInterface(ParentID, ChildID);
  Result := r_GetInterfaceTextEx(PathToInterface, True);
end;

function r_GetInterfaceBox(const ParentID, ChildID: Integer): TBox;
var
  PathToInterface, InterfaceBox: Integer;
  x, y, w, h, ba, p: Integer;
  tB: TBox;
begin
  try
    PathToInterface := r_GetInterface(ParentID, ChildID);
    p := SmartGetFieldInt(PathToInterface, r_Hooks[hook_Interface_ParentID]);
    if (p <> -1) then
    begin
      tB := r_GetInterfaceBox(p shr 16, p and $FFFF);
      x := tB.x1;
      y := tB.y1;
    end else
    begin
      ba := SmartGetFieldInt(PathToInterface, r_Hooks[hook_Interface_BoundsIndex]);
      InterfaceBox := SmartGetFieldArrayObject(0, r_Hooks[hook_InterfaceBounds], ba);
      x := SmartGetFieldInt(InterfaceBox, 'x');
      y := SmartGetFieldInt(InterfaceBox, 'y');
      w := SmartGetFieldInt(PathToInterface, r_Hooks[hook_Interface_Width]);
      h := SmartGetFieldInt(PathToInterface, r_Hooks[hook_Interface_Height]);
    end;
    x := x + SmartGetFieldInt(PathToInterface, r_Hooks[hook_Interface_X]);
    y := y + SmartGetFieldInt(PathToInterface, r_Hooks[hook_Interface_Y]);
    Result := IntToBox(x, y, x + w - 1, y + h - 1);
  finally
    try
      SmartFreeObject(InterfaceBox);
    except
    end;
    try
      SmartFreeObject(PathToInterface);
    except
    end;
  except
    WriteLn('Problem with absolute location. >.<');
  end;
end;

function r_GetSubInterfaceBox(const ParentID, ChildID, ComponentID: Integer): TBox;
var
  PathToInterface, InterfaceBox: Integer;
  x, y, w, h, ba, p: Integer;
  tB: TBox;
begin
  try
    if (ComponentID <> -1) then
      PathToInterface := r_GetSubInterface(ParentID, ChildID, ComponentID)
    else
      PathToInterface := r_GetInterface(ParentID, ChildID);
    p := SmartGetFieldInt(PathToInterface, r_Hooks[hook_Interface_ParentID]);
    if (p <> -1) then
    begin
      tB := r_GetInterfaceBox(p shr 16, p and $FFFF);
      x := tB.x1;
      y := tB.y1;
    end else
    begin
      ba := SmartGetFieldInt(PathToInterface, r_Hooks[hook_Interface_BoundsIndex]);
      InterfaceBox := SmartGetFieldArrayObject(0, r_Hooks[hook_InterfaceBounds], ba);
      x := SmartGetFieldInt(InterfaceBox, 'x');
      y := SmartGetFieldInt(InterfaceBox, 'y');
      w := SmartGetFieldInt(PathToInterface, r_Hooks[hook_Interface_Width]);
      h := SmartGetFieldInt(PathToInterface, r_Hooks[hook_Interface_Height]);
    end;
    x := x + SmartGetFieldInt(PathToInterface, r_Hooks[hook_Interface_X]);
    y := y + SmartGetFieldInt(PathToInterface, r_Hooks[hook_Interface_Y]);
    Result := IntToBox(x, y, x + w - 1, y + h - 1);
  finally
    try
      SmartFreeObject(InterfaceBox);
    except
    end;
    try
      SmartFreeObject(PathToInterface);
    except
    end;
  except
    WriteLn('Problem with absolute location. >.<');
  end;
end;

function r_GetInterfaceActionsEx(const PathToInterface: LongInt; Free: Boolean): TStringArray;
var
  l, i, c: Integer;
  Str: LongInt;
begin
  SetArrayLength(Result, 0);
  l := SmartGetFieldArraySize(PathToInterface, r_Hooks[hook_Interface_Actions], 1);
  if (l < 1) then
    Exit;
  SetArrayLength(Result, l);
  for i := 0 to l - 1 do
  begin
    Str := SmartGetFieldArrayObject(PathToInterface, r_Hooks[hook_Interface_Actions], i);
    if (Str = 0) then
    begin
      SmartFreeObject(Str);
      Break;
    end;
    Result[i] := r_GetString(Str);
    SmartFreeObject(Str);
    Inc(c);
  end;
  SetArrayLength(Result, c);
  if (Free) then
    SmartFreeObject(PathToInterface);
end;

function r_GetInterfaceActions(const ParentID, ChildID: Integer): TStringArray;
var
  PathToInterface: LongInt;
begin
  PathToInterface := r_GetInterface(ParentID, ChildID);
  Result := r_GetInterfaceActionsEx(PathToInterface, True);
end;

function r_GetInterfaceTextureEx(const PathToInterface: LongInt; Free: Boolean): Integer;
begin
  Result := SmartGetFieldInt(PathToInterface, r_Hooks[hook_Interface_TextureID]);
  if (Free) then
    SmartFreeObject(PathToInterface);
end;

function r_GetInterfaceTexture(const ParentID, ChildID: Integer): Integer;
var
  PathToInterface: LongInt;
begin
  PathToInterface := r_GetInterface(ParentID, ChildID);
  Result := r_GetInterfaceTextureEx(PathToInterface, True);
end;

function r_IsClickContinue: Boolean;
var
  CheckInterfaces: TIntegerArray;
  i, ii, CC: Integer;
  PathToCheck: LongInt;
begin
  CheckInterfaces := [211, 241, 251, 101, 242, 102, 161, 249, 243, 64, 65, 244,
                      255, 249, 230, 372, 421, 66, 64, 236, 228];
  for i := 0 to High(CheckInterfaces) do
  begin
    PathToCheck := SmartGetFieldArrayObject(0, r_Hooks[hook_Interfaces], CheckInterfaces[i]);
    CC := SmartGetFieldArraySize(PathToCheck, '', 1);
    SmartFreeObject(PathToCheck);
    for ii := 0 to CC - 1 do
      if (Pos('lick here to cont', Lowercase(r_GetInterfaceText(CheckInterfaces[i], ii))) > 0) then
      begin
        Result := True;
        Exit;
      end;
  end;
end;

function r_ClickContinue: Boolean;
var
  CheckInterfaces: TIntegerArray;
  i, ii, CC: Integer;
  Box: TBox;
  PathToCheck: LongInt;
begin
  CheckInterfaces := [211, 241, 251, 101, 242, 102, 161, 249, 243, 64, 65, 244,
                      255, 249, 230, 372, 421, 66, 64, 236, 228];
  for i := 0 to High(CheckInterfaces) do
  begin
    PathToCheck := SmartGetFieldArrayObject(0, r_Hooks[hook_Interfaces], CheckInterfaces[i]);
    CC := SmartGetFieldArraySize(PathToCheck, '', 1);
    SmartFreeObject(PathToCheck);
    for ii := 0 to CC - 1 do
      if (Pos('lick here to cont', Lowercase(r_GetInterfaceText(CheckInterfaces[i], ii))) > 0) then
      begin
        Box := r_GetInterfaceBox({Point(7, 347), }CheckInterfaces[i], ii);
        r_ClickMouseBox(Box.x1, Box.y1, Box.x2, Box.y2, True);
        Wait(RandomRange(500, 800));
        Result := True;
        Exit;
      end;
  end;
end;