{=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=
RRL - Reflection Resource Library
Path routines

---------------------------------------------------------

 * function NULL_PATH: TPath;
     By: Timer
 * function PathStart(const ThePath: TPath): TRSTile;
     By: Timer
 * function PathEnd(const ThePath: TPath): TRSTile;
     By: Timer
 * function PathNextTileEx(const ThePath: TPath; const Dist: Integer): TRSTile;
     By: Timer
 * function PathNextTile(const ThePath: TPath): TRSTile;
     By: Timer
 * function PathAtDestination(const ThePath: TPath): Boolean;
     By: Timer
 * function PathStep(const ThePath: TPath): Boolean;
     By: Timer
 * function PathReverse(const ThePath: TPath): TPath;
     By: Timer
=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=}

{
This work is licensed under the Creative Commons Attribution-NonCommercial-NoDerivs 3.0 Unported License.
To view a copy of this license, visit http://creativecommons.org/licenses/by-nc-nd/3.0/
or send a letter to Creative Commons, 171 Second Street, Suite 300, San Francisco, California, 94105, USA.

Copyright (C) 2010 - 2011 by Joe Haddad, all rights reserved.
This file is part of the RRL project (https://github.com/Timer/RRL).

For extended permissions please contact me by E-Mail, Timer150@Gmail.com.
}

function NULL_PATH: TPath;
var
  NullPath: TPath;
  TileArray: TRSTileArray;
  HandlerArray: TIntegerArray;
begin
  SetLength(TileArray, 0);
  SetLength(HandlerArray, 0);
  with NullPath do
  begin
    Tiles := TileArray;
    Handlers := HandlerArray;
  end;
  Result := NullPath;
end;

function PathStart(const ThePath: TPath): TRSTile;
begin
  Result := NULL_RSTile;
  if (Length(ThePath.Tiles) > 0) then
    Result := ThePath.Tiles[0];
end;

function PathEnd(const ThePath: TPath): TRSTile;
begin
  Result := NULL_RSTile;
  if (Length(ThePath.Tiles) > 0) then
    Result := ThePath.Tiles[Length(ThePath.Tiles) - 1];
end;

function PathNextTileEx(const ThePath: TPath; const Dist: Integer): TRSTile;
var
  i, l: Integer;
begin
  Result := NULL_RSTile;
  l := Length(ThePath.Tiles);
  if (l > 0) then
    for i := 0 to l - 1 do
      if (TileOnMinimapEx(ThePath.Tiles[i], Dist)) then
        Result := ThePath.Tiles[i];
end;

function PathNextTile(const ThePath: TPath): TRSTile;
var
  i, l: Integer;
begin
  Result := NULL_RSTile;
  l := Length(ThePath.Tiles);
  if (l > 0) then
    for i := 0 to l - 1 do
      if (TileOnMinimap(ThePath.Tiles[i])) then
        Result := ThePath.Tiles[i];
end;

function PathAtDestination(const ThePath: TPath): Boolean;
begin
  Result := DistanceBetween(GetLocation, PathEnd(ThePath)) < 5;
end;

function PathStep(const ThePath: TPath): Boolean;
var
  OurTile, TheClickTile, FlagTile: TRSTile;
  l, r, rr: Integer;
  Params: TIntegerArray;
begin
  l := Length(ThePath.Tiles);
  TheClickTile := NULL_RSTILE;
  if (l > 0) then
  begin
    OurTile := GetLocation;
    if (DistanceBetween(OurTile, PathEnd(ThePath)) < 5) then
    begin
      Result := True;
      Exit;
    end;
    r := RandomRange(11, 14);
    TheClickTile := PathNextTileEx(ThePath, r);
  end;
  if (not (TheClickTile = NULL_RSTILE)) then
  begin
    Params := ThePath.Handlers;
    if (InIntArray(Params, PATH_HANDLER_RUN)) then
    begin
      //TODO .
    end;
    if (InIntArray(Params, PATH_HANDLER_WALKING)) then
    begin
      FlagTile := GetFlagPosition;
      if (FlagTile.x < 0) then
        FlagTile := NULL_RSTILE;
      if (FlagTile = NULL_RSTILE) then
        ClickTile(TheClickTile)
      else
      begin
        rr := RandomRange(4, 8);
        if (DistanceBetween(GetLocation, FlagTile) >= rr) then
          ClickTile(TheClickTile);
      end;
    end else
      ClickTile(TheClickTile);
    Result := True;
  end;
  Result := False;
end;

function PathReverse(const ThePath: TRSTileArray): TRSTileArray;
var
  i, l: Integer;
begin
  l := Length(ThePath);
  SetLength(Result, l);
  for i := 0 to l - 1 do
    Result[l - i - 1] := ThePath[i];
end;