{=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=
RRL - Reflection Resource Library
Randoms routines.

---------------------------------------------------------

 * function r_GetRandomName(const Rand: Byte): string;
     By: Timer
 * function r_GetRandomActive(const Rand: Byte): TBoolFunc;
     By: Timer
 * function r_GetRandomSolve(const Rand: Byte): TBoolFunc;
     By: Timer
 * function r_GetRandomMaxTime(const Rand: Byte): LongInt;
     By: Timer
 * procedure r_LoadRandoms;
     By: Timer
 * procedure r_EnableRandom(const id: Byte);
     By: Timer
 * procedure r_DisableRandom(const id: Byte);
     By: Timer
 * function r_IsRandomEnabled(const id: Byte): Boolean;
     By: Timer
 * function r_HandleRandoms: Boolean;
     By: Timer
=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=}

{
This work is licensed under the Creative Commons Attribution-NonCommercial-NoDerivs 3.0 Unported License.
To view a copy of this license, visit http://creativecommons.org/licenses/by-nc-nd/3.0/
or send a letter to Creative Commons, 171 Second Street, Suite 300, San Francisco, California, 94105, USA.

Copyright (C) 2010 - 2011 by Joe Haddad, all rights reserved.
This file is part of the RRL project (https://github.com/Timer/RRL).

For extended permissions please contact me by E-Mail, Timer150@Gmail.com.
}

{.include RRL\core\Randoms\Beehive.txt}
{.include RRL\core\Randoms\CapnArnav.txt}
{.include RRL\core\Randoms\Certer.txt}
{.include RRL\core\Randoms\DrillDemon.txt}
{.include RRL\core\Randoms\FreakyForester.txt}
{.include RRL\core\Randoms\Frog.txt}
{.include RRL\core\Randoms\Mime.txt}
{.include RRL\core\Randoms\Pillory.txt}
{.include RRL\core\Randoms\Pinball.txt}
{.include RRL\core\Randoms\Quiz.txt}
{.include RRL\core\Randoms\Sandwhich.txt}
{.include RRL\core\Randoms\ScapeRuneIsland.txt}

const
  R_RANDOMS_BEEHIVE = 0;
  R_RANDOMS_CAPTAIN_ARNAV = 1;
  R_RANDOMS_CERTER = 2;
  R_RANDOMS_DRILL_DEMON = 3;
  R_RANDOMS_FREAKY_FORESTER = 4;
  R_RANDOMS_FROG = 5;
  R_RANDOMS_MIME = 6;
  R_RANDOMS_PILLORY = 7;
  R_RANDOMS_PINBALL = 8;
  R_RANDOMS_QUIZ = 9;
  R_RANDOMS_SANDWHICH = 10;
  R_RANDOMS_SCAPE_RUNE_ISLAND = 11;

  R_RANDOMC_MIN = 0;
  R_RANDOMC_MAX = 11;

function r_GetRandomName(const Rand: Byte): string;
begin
  case Rand of
    R_RANDOMS_BEEHIVE: Result := 'Beehive';
    R_RANDOMS_CAPTAIN_ARNAV: Result := 'Captain Arnav';
    R_RANDOMS_DRILL_DEMON: Result := 'Drill Demon';
    R_RANDOMS_FREAKY_FORESTER: Result := 'Freaky Forester';
    R_RANDOMS_FROG: Result := 'Frog';
    R_RANDOMS_MIME: Result := 'Mime';
    R_RANDOMS_PILLORY: Result := 'Pillory';
    R_RANDOMS_PINBALL: Result := 'Pinball';
    R_RANDOMS_QUIZ: Result := 'Quiz';
    R_RANDOMS_SANDWHICH: Result := 'Sandwhich Lady';
    R_RANDOMS_SCAPE_RUNE_ISLAND: Result := 'ScapeRune Island';
  end;
end;

function r_GetRandomActive(const Rand: Byte): TBoolFunc;
begin
  Result := nil;
  case Rand of
    R_RANDOMS_BEEHIVE: Result := @r_Beehive_InRandom;
    R_RANDOMS_CAPTAIN_ARNAV: Result := @r_CapnArnav_InRandom;
    R_RANDOMS_DRILL_DEMON: Result := @r_DrillDemon_InRandom;
    R_RANDOMS_FREAKY_FORESTER: Result := @r_FreakyForester_InRandom;
    R_RANDOMS_FROG: Result := @r_Frog_InRandom;
    R_RANDOMS_MIME: Result := @r_Mime_InRandom;
    R_RANDOMS_PILLORY: Result := @r_Pillory_InRandom;
    R_RANDOMS_PINBALL: Result := @r_Pinball_InRandom;
    R_RANDOMS_QUIZ: Result := @r_Quiz_InRandom;
    R_RANDOMS_SANDWHICH: Result := @r_Sandwhich_InRandom;
    R_RANDOMS_SCAPE_RUNE_ISLAND: Result := @r_ScapeRuneIsland_InRandom;
  end;
end;

function r_GetRandomSolve(const Rand: Byte): TBoolFunc;
begin
  Result := nil;
  case Rand of
    R_RANDOMS_BEEHIVE: Result := @r_Beehive_Solve;
    R_RANDOMS_CAPTAIN_ARNAV: Result := @r_CapnArnav_Solve;
    R_RANDOMS_DRILL_DEMON: Result := @r_DrillDemon_Solve;
    R_RANDOMS_FREAKY_FORESTER: Result := @r_FreakyForester_Solve;
    R_RANDOMS_FROG: Result := @r_Frog_Solve;
    R_RANDOMS_MIME: Result := @r_Mime_Solve;
    R_RANDOMS_PILLORY: Result := @r_Pillory_Solve;
    R_RANDOMS_PINBALL: Result := @r_Pinball_Solve;
    R_RANDOMS_QUIZ: Result := @r_Quiz_Solve;
    R_RANDOMS_SANDWHICH: Result := @r_Sandwhich_Solve;
    R_RANDOMS_SCAPE_RUNE_ISLAND: Result := @r_ScapeRuneIsland_Solve;
  end;
end;

function r_GetRandomMaxTime(const Rand: Byte): LongInt;
{begin
  case Rand of
    R_RANDOMS_BEEHIVE: Result := 'Beehive';
    R_RANDOMS_CAPTAIN_ARNAV: Result := 'Captain Arnav';
    R_RANDOMS_DRILL_DEMON: Result := 'Drill Demon';
    R_RANDOMS_FREAKY_FORESTER: Result := 'Freaky Forester';
    R_RANDOMS_FROG: Result := 'Frog';
    R_RANDOMS_MIME: Result := 'Mime';
    R_RANDOMS_PILLORY: Result := 'Pillory';
    R_RANDOMS_PINBALL: Result := 'Pinball';
    R_RANDOMS_QUIZ: Result := 'Quiz';
    R_RANDOMS_SANDWHICH: Result := 'Sandwhich Lady';
    R_RANDOMS_SCAPE_RUNE_ISLAND: Result := 'ScapeRune Island';
  end;
end;}
begin
  Result := RandomRange(1000 * 60 * 8, 1000 * 60 * 10);
end;

procedure r_LoadRandoms;
var
  b: Byte;
begin
  SetLength(r_Randoms, R_RANDOMC_MAX - R_RANDOMC_MIN + 1);
  for b := R_RANDOMC_MIN to R_RANDOMC_MAX do
    with r_Randoms[b] do
    begin
      ID := b;
      InRandom := r_GetRandomActive(b);
      Solve := r_GetRandomSolve(b);
      Name := r_GetRandomName(b);
      TimeOut := r_GetRandomMaxTime(b);
      Active := True;
    end;
end;

procedure r_EnableRandom(const id: Byte);
var
  i, H: Integer;
begin
  H := Length(r_Randoms) - 1;
  for i := 0 to H do
    if (r_Randoms[i].ID = id) then
    begin
      r_Randoms[i].Active := True;
      Exit;
    end;
end;

procedure r_DisableRandom(const id: Byte);
var
  i, H: Integer;
begin
  H := Length(r_Randoms) - 1;
  for i := 0 to H do
    if (r_Randoms[i].ID = id) then
    begin
      r_Randoms[i].Active := False;
      Exit;
    end;
end;

function r_IsRandomEnabled(const id: Byte): Boolean;
var
  i, H: Integer;
begin
  Result := False;
  H := Length(r_Randoms) - 1;
  for i := 0 to H do
    if (r_Randoms[i].ID = id) then
    begin
      Result := r_Randoms[i].Active;
      Exit;
    end;
end;

function r_HandleRandoms: Boolean;
var
  i, H: Integer;
  m: LongInt;
begin
  Result := False;
  H := Length(r_Randoms) - 1;
  for i := 0 to H do
    if (r_Randoms[i].Active) then
    begin
      if (r_Randoms[i].InRandom = nil) or (r_Randoms[i].Solve = nil) then
        Continue;
      if (r_Randoms[i].InRandom()) then
      begin
        WriteLn('Random detected [' + r_Randoms[i].Name + ']!');
        m := GetSystemTime;
        WriteLn('Attempting to solve random [' + r_Randoms[i].Name + ']!');
        while (GetSystemTime - m < r_Randoms[i].TimeOut) and (not Result) do
          Result := r_Randoms[i].Solve();
        if (Result) then
          WriteLn('Solved random [' + r_Randoms[i].Name + ']!')
        else
        begin
          WriteLn('Random solving failed [' + r_Randoms[i].Name + ']!');
          Logout;
        end;
        Exit;
      end;
    end;
end;